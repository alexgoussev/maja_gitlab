diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/CMakeLists.txt OTB-7.0.0/Modules/Core/CommandLineParser/CMakeLists.txt
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/CMakeLists.txt	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,25 @@
+#
+# Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+#
+# This file is part of Orfeo Toolbox
+#
+#     https://www.orfeo-toolbox.org/
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+project(OTBCommandLineParser)
+
+set(OTBCommandLineParser_LIBRARIES OTBCommandLineParser)
+
+otb_module_impl()
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/include/otbCommandLineArgumentParser.h OTB-7.0.0/Modules/Core/CommandLineParser/include/otbCommandLineArgumentParser.h
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/include/otbCommandLineArgumentParser.h	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/include/otbCommandLineArgumentParser.h	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,293 @@
+/*
+ * Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+ *
+ * This file is part of Orfeo Toolbox
+ *
+ *     https://www.orfeo-toolbox.org/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef otbCommandLineArgumentParser_h
+#define otbCommandLineArgumentParser_h
+
+#include <iostream>
+#include <vector>
+#include <string>
+#include <map>
+
+#include "itkProcessObject.h"
+
+/** \class CommandLineArgumentParserHelpException
+ * \brief This exception is thrown when the help menu is displayed.
+ *
+ * \ingroup OTBCommandLineParser
+ */
+class ITK_EXPORT CommandLineArgumentParserHelpException
+  : public itk::ExceptionObject
+{
+public:
+  /** Run-time information. */
+  itkTypeMacro(CommandLineArgumentParserHelpException, ExceptionObject);
+
+  /** Constructor. */
+  CommandLineArgumentParserHelpException(const char *file, unsigned int line,
+                                         const char* message = "Help:",
+                                         const char* loc = "Unknown") :
+    ExceptionObject(file, line, message, loc) {}
+  /** Constructor. */
+  CommandLineArgumentParserHelpException(const std::string & file, unsigned int line,
+                                         const char* message = "Help:",
+                                         const char* loc = "Unknown") :
+    ExceptionObject(file, line, message, loc) {}
+};
+
+/** \class CommandLineArgumentParserVersionException
+ * \brief This exception is thrown when the version is displayed.
+ *
+ * \ingroup OTBCommandLineParser
+ */
+class ITK_EXPORT CommandLineArgumentParserVersionException
+  : public itk::ExceptionObject
+{
+public:
+  /** Run-time information. */
+  itkTypeMacro(CommandLineArgumentParserVersionException, ExceptionObject);
+
+  /** Constructor. */
+  CommandLineArgumentParserVersionException(const char *file, unsigned int line,
+                                            const char* message = "Version:",
+                                            const char* loc = "Unknown") :
+    ExceptionObject(file, line, message, loc) {}
+  /** Constructor. */
+  CommandLineArgumentParserVersionException(const std::string & file, unsigned int line,
+                                            const char* message = "Version:",
+                                            const char* loc = "Unknown") :
+    ExceptionObject(file, line, message, loc) {}
+};
+
+/** \class CommandLineArgumentParserArgumentErrorException
+ * \brief This exception is thrown when the version is displayed.
+ *
+ * \ingroup OTBCommandLineParser
+ */
+class ITK_EXPORT CommandLineArgumentParserArgumentErrorException
+  : public itk::ExceptionObject
+{
+public:
+  /** Run-time information. */
+  itkTypeMacro(CommandLineArgumentParserArgumentErrorException, ExceptionObject);
+
+  /** Constructor. */
+  CommandLineArgumentParserArgumentErrorException(const char *file, unsigned int line,
+                                                  const char* message = "Argument error:",
+                                                  const char* loc = "Unknown") :
+    ExceptionObject(file, line, message, loc) {}
+  /** Constructor. */
+  CommandLineArgumentParserArgumentErrorException(const std::string & file, unsigned int line,
+                                                  const char* message = "Argument error:",
+                                                  const char* loc = "Unknown") :
+    ExceptionObject(file, line, message, loc) {}
+};
+
+namespace otb
+{
+
+//class CommandLineArgumentParser;
+
+/**
+ * \class CommandLineArgumentParseResult
+ * \brief Object returned by CommandLineArgumentParser
+ *
+ * \see CommandLineArgumentParser
+ *
+ * \ingroup OTBCommandLineParser
+ */
+class ITK_EXPORT CommandLineArgumentParseResult : public itk::ProcessObject
+{
+public:
+  typedef CommandLineArgumentParseResult Self;
+  typedef itk::ProcessObject             Superclass;
+  typedef itk::SmartPointer<Self>        Pointer;
+  typedef itk::SmartPointer<const Self>  ConstPointer;
+
+  itkNewMacro(Self);
+  itkTypeMacro(CommandLineArgumentParseResult, itk::ProcessObject);
+
+  /** Check whether the option was passed in or not */
+  bool IsOptionPresent(const std::string& option) const;
+
+  /** Check whether the input image option was passed in or not */
+  bool IsOptionInputImagePresent(void) const;
+
+  /** Check whether the output image option was passed in or not */
+  bool IsOptionOutputImagePresent(void) const;
+
+  /** Check whether the OTBTesting option was passed in or not */
+  bool IsOptionOTBTestingPresent(void) const;
+
+  /** Get one of the parameters to the option */
+//  const char *GetOptionParameter(const char *option, unsigned int number = 0);
+  int GetNumberOfParameters(const std::string& option);
+
+  void PrintSelf(std::ostream& os, itk::Indent indent) const override;
+
+#define otbGetParameterMacro(name, type)                                                 \
+  virtual type GetParameter ## name (const std::string& option, unsigned int number = 0) const     \
+  {                                                                     \
+    std::string parameter = this->GetParameterString(option, number);   \
+    type        lValeur;                                                \
+    std::stringstream flux;                                             \
+    flux << parameter;                                                  \
+    flux >> lValeur;                                                    \
+    return lValeur;                                                     \
+  }
+
+  otbGetParameterMacro(Char, char);
+  otbGetParameterMacro(Short, short);
+  otbGetParameterMacro(UShort, unsigned short);
+  otbGetParameterMacro(Int, int);
+  otbGetParameterMacro(UInt, unsigned int);
+  otbGetParameterMacro(Long, long);
+  otbGetParameterMacro(ULong, unsigned long);
+  otbGetParameterMacro(Float, float);
+  otbGetParameterMacro(Double, double);
+
+  std::string GetParameterString(const std::string& option, unsigned int number = 0) const;
+
+  std::string GetInputImage(void) const;
+  std::string GetOutputImage(void) const;
+
+protected:
+  CommandLineArgumentParseResult();
+  ~CommandLineArgumentParseResult() override;
+
+private:
+  template<typename TypeValeur>
+  TypeValeur GetParameter(const std::string& option, unsigned int number = 0) const;
+
+  typedef std::vector<std::string>                  ParameterArrayType;
+  typedef std::map<std::string, ParameterArrayType> OptionMapType;
+
+  void Clear();
+  void AddOption(const std::string & option);
+  void AddParameter(const std::string & option, const std::string & parameter);
+
+  OptionMapType m_OptionMap;
+
+  friend class CommandLineArgumentParser;
+};
+
+/**
+ * \class CommandLineArgumentParser
+ * \brief Utility to Parse command line argument.
+ *
+ * Usage:
+ *  - Initialize the parser:
+ * \code
+ *    CommandLineArgumentParser parser;
+ *    parser.SetProgramDescription("This program is an example");
+ *    parser.AddInputImage();
+ *    parser.AddOption("--DetailedName","Help explanation","-d", 1, false);
+ * \endcode
+ *  - Use the parser:
+ * \code
+ *    CommandLineArgumentParseResult result;
+ *    if( parser.ParseCommandLine(argc, argv, &result) )
+ *    {
+ *      if( result.IsOptionPresent("--DetailledName") )
+ *      {
+ *        std::cout << "DetailedName : " << result.GetParameterString("--DetailedName") << std::endl;
+ *        ...
+ *      }
+ *    }
+ * \endcode
+ *
+ * \ingroup OTBCommandLineParser
+ */
+class ITK_EXPORT CommandLineArgumentParser : public itk::ProcessObject
+{
+public:
+  typedef CommandLineArgumentParser     Self;
+  typedef itk::ProcessObject            Superclass;
+  typedef itk::SmartPointer<Self>       Pointer;
+  typedef itk::SmartPointer<const Self> ConstPointer;
+
+  itkNewMacro(Self);
+  itkTypeMacro(CommandLineArgumentParser, itk::ProcessObject);
+
+  /** Add an input image option */
+  void AddInputImage(bool obligatory = true);
+  /** Add an output image option */
+  void AddOutputImage(bool obligatory = true);
+
+  /** Set the program name */
+  itkSetStringMacro(ProgramDescription);
+
+  /** Get the program name */
+  itkGetStringMacro(ProgramDescription);
+
+  /** Add a new option with fixed number of parameters */
+  void AddOption(const std::string& name,
+                 const std::string& comment,
+                 const std::string& synonym = ITK_NULLPTR,
+                 int nParameters = 1,
+                 bool obligatory = true);
+
+  /** Add a new option with unknown number of parameters */
+  void AddOptionNParams(const std::string& name, const std::string& comment, const std::string& synonym = ITK_NULLPTR, bool obligatory = true);
+
+  /** Interpret options from the command line */
+  void ParseCommandLine(int argc, char *argv[],
+                        CommandLineArgumentParseResult * outResult,
+                        bool failOnUnknownTrailingParameters = true);
+
+protected:
+  CommandLineArgumentParser();
+  ~CommandLineArgumentParser() override;
+
+private:
+
+  void PrintUsage(std::ostream& os) const;
+  void PrintVersion(std::ostream& os) const;
+  bool FindOption(const std::string&, int& index);
+  bool IsNumber(const std::string& text);
+
+  /** Try processing a command line.  Returns false if something breaks */
+  bool TryParseCommandLine(int argc, char *argv[],
+                           CommandLineArgumentParseResult * outResult,
+                           bool reportFailedMsg,
+                           bool failOnUnknownTrailingParameters);
+
+  typedef struct
+  {
+    std::string CommonName;             // option name
+    std::string Description;            // option description
+    std::string Synonym;                // shortcut
+    bool NumberOfParametersFixed;       // required number of values
+    int NumberOfParameters;             // number of values
+    bool Obligatory;                    // is the option mandatory ?
+    bool Finded;                        // check if the option is present
+  } OptionType;
+
+  typedef std::vector<OptionType> ListOptionType;
+
+  ListOptionType m_OptionList;
+
+  std::string m_ProgramName;
+  std::string m_ProgramDescription;
+};
+
+}
+
+#endif // otbCommandLineArgumentParser_h_
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/otb-module.cmake OTB-7.0.0/Modules/Core/CommandLineParser/otb-module.cmake
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/otb-module.cmake	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/otb-module.cmake	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,33 @@
+#
+# Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+#
+# This file is part of Orfeo Toolbox
+#
+#     https://www.orfeo-toolbox.org/
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+set(DOCUMENTATION "TODO")
+
+otb_module(OTBCommandLineParser
+  DEPENDS
+    OTBCommon
+    OTBITK
+
+  TEST_DEPENDS
+    OTBTestKernel
+
+  DESCRIPTION
+    "${DOCUMENTATION}"
+)
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/src/CMakeLists.txt OTB-7.0.0/Modules/Core/CommandLineParser/src/CMakeLists.txt
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/src/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/src/CMakeLists.txt	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,31 @@
+#
+# Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+#
+# This file is part of Orfeo Toolbox
+#
+#     https://www.orfeo-toolbox.org/
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+set(OTBCommandLineParser_SRC
+  otbCommandLineArgumentParser.cxx
+  )
+
+add_library(OTBCommandLineParser ${OTBCommandLineParser_SRC})
+target_link_libraries(OTBCommandLineParser
+  ${OTBCommon_LIBRARIES}
+  ${OTBITK_LIBRARIES}
+  )
+
+otb_module_target(OTBCommandLineParser)
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/src/otbCommandLineArgumentParser.cxx OTB-7.0.0/Modules/Core/CommandLineParser/src/otbCommandLineArgumentParser.cxx
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/src/otbCommandLineArgumentParser.cxx	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/src/otbCommandLineArgumentParser.cxx	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,448 @@
+/*
+ * Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+ *
+ * This file is part of Orfeo Toolbox
+ *
+ *     https://www.orfeo-toolbox.org/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "otbCommandLineArgumentParser.h"
+
+#include <assert.h>
+#include <iostream>
+
+#include "itkMacro.h"
+#include "otbConfigure.h" // For OTB_VERSION_STRING generated by ccmake
+
+namespace otb
+{
+
+// --------- CommandLineArgumentParseResult
+// --------- ----------------------------------------
+CommandLineArgumentParseResult::CommandLineArgumentParseResult() {}
+
+CommandLineArgumentParseResult::~CommandLineArgumentParseResult() {}
+
+void CommandLineArgumentParseResult
+::PrintSelf(std::ostream& itkNotUsed(os), itk::Indent itkNotUsed(indent)) const
+{
+
+}
+
+bool CommandLineArgumentParseResult
+::IsOptionPresent(const std::string& option) const
+{
+  return (m_OptionMap.find(option) != m_OptionMap.end());
+}
+
+bool CommandLineArgumentParseResult
+::IsOptionInputImagePresent(void) const
+{
+  return (this->IsOptionPresent("--InputImage"));
+}
+bool CommandLineArgumentParseResult
+::IsOptionOutputImagePresent(void) const
+{
+  return (this->IsOptionPresent("--OutputImage"));
+}
+
+bool CommandLineArgumentParseResult
+::IsOptionOTBTestingPresent(void) const
+{
+  return (this->IsOptionPresent("--OTBTesting"));
+}
+
+std::string CommandLineArgumentParseResult
+::GetParameterString(const std::string& option, unsigned int number) const
+{
+  if (this->IsOptionPresent(option) == false)
+    {
+    std::ostringstream msg;
+    msg << "GetParameterString(): The following '" << option << "' option is unknown !!";
+    CommandLineArgumentParserArgumentErrorException e(__FILE__, __LINE__);
+    e.SetDescription(msg.str().c_str());
+    throw e;
+    }
+  OptionMapType::const_iterator it = m_OptionMap.begin();
+  it = m_OptionMap.find(option);
+  ParameterArrayType pat = (*it).second;
+  std::string        lString = pat[number];
+  return (lString);
+}
+
+std::string CommandLineArgumentParseResult
+::GetInputImage(void) const
+{
+  return (GetParameterString("--InputImage"));
+}
+
+std::string CommandLineArgumentParseResult
+::GetOutputImage(void) const
+{
+  return (GetParameterString("--OutputImage"));
+}
+
+int CommandLineArgumentParseResult
+::GetNumberOfParameters(const std::string& option)
+{
+  assert(IsOptionPresent(option));
+  return (m_OptionMap[option].size());
+}
+
+void CommandLineArgumentParseResult
+::Clear()
+{
+  m_OptionMap.clear();
+}
+
+void CommandLineArgumentParseResult
+::AddOption(const std::string& option)
+{
+  ParameterArrayType pat;
+//  pat.reserve(nParms);
+  m_OptionMap[option] = pat;
+}
+
+void CommandLineArgumentParseResult
+::AddParameter(const std::string& option, const std::string& parameter)
+{
+  m_OptionMap[option].push_back(parameter);
+}
+
+// --------- CommandLineArgumentParser  ----------------------------------------
+
+CommandLineArgumentParser
+::CommandLineArgumentParser()
+{
+  AddOption("--help", "Help", "-h", 0, false);
+  AddOption("--version", "Version", "-v", 0, false);
+  AddOptionNParams("--OTBTesting", "Testing purposes only.", "-OTBTesting", false);
+  m_ProgramDescription.clear();
+}
+
+CommandLineArgumentParser
+::~CommandLineArgumentParser() {}
+
+
+void CommandLineArgumentParser
+::AddInputImage(bool obligatory)
+{
+  AddOption("--InputImage", "input image file name ", "-in", 1, obligatory);
+}
+
+void CommandLineArgumentParser
+::AddOutputImage(bool obligatory)
+{
+  AddOption("--OutputImage", "output image file name ", "-out", 1, obligatory);
+}
+
+void CommandLineArgumentParser
+::AddOption(const std::string& name, const std::string& comment, const std::string& synonym, int nParameters, bool obligatory)
+{
+  // Create a structure for the command
+  OptionType option;
+  option.CommonName  = name;
+  option.Description = comment;
+  option.Synonym     = synonym;
+  option.NumberOfParameters = nParameters;
+  option.NumberOfParametersFixed = true;
+  option.Obligatory = obligatory;
+  option.Finded = false;
+
+  // Add the option to the map
+  m_OptionList.push_back(option);
+
+}
+
+void CommandLineArgumentParser
+::AddOptionNParams(const std::string& name, const std::string& comment, const std::string& synonym, bool obligatory)
+{
+  // Create a structure for the command
+  OptionType option;
+  option.CommonName  = name;
+  option.Description = comment;
+  option.Synonym     = synonym;
+  option.NumberOfParameters = -1;
+  option.NumberOfParametersFixed = false;
+  option.Obligatory = obligatory;
+  option.Finded = false;
+
+  // Add the option to the map
+  m_OptionList.push_back(option);
+
+}
+
+void CommandLineArgumentParser
+::ParseCommandLine(int argc, char *argv[],
+                   CommandLineArgumentParseResult * outResult,
+                   bool failOnUnknownTrailingParameters)
+{
+  bool tryParse = TryParseCommandLine(argc, argv, outResult, false, failOnUnknownTrailingParameters);
+
+  bool IsHelp = outResult->IsOptionPresent("--help");
+  if (IsHelp)
+    {
+    PrintUsage(std::cout);
+    CommandLineArgumentParserHelpException e(__FILE__, __LINE__);
+    e.SetDescription("ParseCommandLine(): Help Parser");
+    throw e;
+    }
+  bool IsVersion = outResult->IsOptionPresent("--version");
+  if (IsVersion)
+    {
+    PrintVersion(std::cout);
+    CommandLineArgumentParserHelpException e(__FILE__, __LINE__);
+    e.SetDescription("ParseCommandLine(): Version Parser");
+    throw e;
+    }
+  tryParse = TryParseCommandLine(argc, argv, outResult, true, failOnUnknownTrailingParameters);
+  if (!tryParse)
+    {
+    PrintUsage(std::cerr);
+    CommandLineArgumentParserArgumentErrorException e(__FILE__, __LINE__);
+    e.SetDescription("ParseCommandLine() argument Error");
+    throw e;
+    }
+}
+
+bool CommandLineArgumentParser::TryParseCommandLine(int argc, char *argv[],
+                                                    CommandLineArgumentParseResult * outResult,
+                                                    bool reportFailedMsg,
+                                                    bool failOnUnknownTrailingParameters)
+{
+// Clear the result
+  outResult->Clear();
+
+  int i;
+  m_ProgramName = std::string(argv[0]);
+  int index(0);
+
+// Go through the arguments
+  for (i = 1; i < argc; ++i)
+    {
+// Get the next argument
+    std::string arg(argv[i]);
+
+    // Check if the argument is known
+    bool findOption = FindOption(arg, index);
+    if (findOption == false)
+      {
+      if (failOnUnknownTrailingParameters)
+        {
+        // Unknown argument found
+        if (reportFailedMsg == true)
+          {
+          std::cerr << "The following '" << arg << "' option is unknown !!" << std::endl;
+          }
+        return false;
+        }
+      else return true;
+      }
+    //Check the option
+    m_OptionList[index].Finded = true;
+    // If the number of parameters is predefined
+    if (m_OptionList[index].NumberOfParametersFixed == true)
+      {
+      // Check if the number of parameters is correct
+      int nParameters = m_OptionList[index].NumberOfParameters;
+      if (i + nParameters >= argc)
+        {
+        // Too few parameters
+        if (reportFailedMsg == true)
+          {
+          std::cerr << "Missing one (or more) parameter(s) for the following '" << arg << "' option." << std::endl;
+          }
+        return false;
+        }
+      // Tell the result that the option has been encountered
+      outResult->AddOption(m_OptionList[index].CommonName);
+
+      // Pass in the parameters
+      for (int j = 0; j < nParameters; ++j, ++i)
+        {
+        outResult->AddParameter(m_OptionList[index].CommonName, std::string(argv[i + 1]));
+        }
+      }
+// If the number of parameters is not defined, read until the next option or the end of argv
+    else
+      {
+// Tell the result that the option has been encountered
+      outResult->AddOption(m_OptionList[index].CommonName);
+      bool goOnFlag(true);
+      while (goOnFlag == true)
+        {
+        if (argv[i + 1] != ITK_NULLPTR)
+          {
+          std::string strArgv = std::string(argv[i + 1]);
+          if (strArgv[0] == '-' )
+            {
+            // Test if the string is an argument or a real
+            if(!this->IsNumber(strArgv))
+              {
+              goOnFlag = false;
+              }
+            else // If not an argument add it to the option list
+              {
+              outResult->AddParameter(m_OptionList[index].CommonName, strArgv);
+              ++i;
+              }
+            }
+          else
+            {
+            outResult->AddParameter(m_OptionList[index].CommonName, strArgv);
+            ++i;
+            }
+          }
+        else goOnFlag = false;
+        //         ++i;
+        }
+      }
+
+    }
+
+// Check that all required arguments are specified
+  for (unsigned int cpt = 0; cpt < m_OptionList.size(); ++cpt)
+    {
+    if ((m_OptionList[cpt].Obligatory == true) && (m_OptionList[cpt].Finded == false))
+      {
+      // Too few parameters
+      if (reportFailedMsg == true)
+        {
+        std::cerr << "'" << m_OptionList[cpt].CommonName << "' argument is required !!!" << std::endl;
+        }
+      return false;
+      }
+    }
+
+// Everything is correct
+  return true;
+}
+
+
+bool CommandLineArgumentParser::IsNumber(const std::string& text)
+{
+  if(text.empty())
+    return false;
+
+  // Don't test the sign (-)
+  unsigned int i = 1;
+  while (text[i])
+    {
+    if( text[i] != '.' && text[i] != ',')
+      {
+      if(!isdigit(text[i]))
+        {
+        return false;
+        }
+      }
+    ++i;
+    }
+  return true;
+}
+
+bool CommandLineArgumentParser::FindOption(const std::string& option, int& index)
+{
+  //Look through the option list
+  bool         optionFoundFlag(false);
+  bool         goOnFlag(true);
+  unsigned int cpt(0);
+  std::string  strOption(option);
+  while (goOnFlag == true)
+    {
+    if ((m_OptionList[cpt].CommonName == strOption) || (m_OptionList[cpt].Synonym == strOption))
+      {
+      index = cpt;
+      goOnFlag = false;
+      optionFoundFlag = true;
+      }
+    ++cpt;
+    if (cpt >= m_OptionList.size())
+      {
+      goOnFlag = false;
+      }
+    }
+  return (optionFoundFlag);
+}
+
+void CommandLineArgumentParser::PrintUsage(std::ostream& os) const
+{
+  os << std::endl;
+
+  if (!m_ProgramDescription.empty())
+    {
+    os << m_ProgramDescription << std::endl << std::endl;
+    }
+
+  os << " Usage : " << m_ProgramName << std::endl;
+  // Compute the max width for option display
+  int          largeurmax(-1);
+  unsigned int i;
+
+  for (i = 0; i < m_OptionList.size(); ++i)
+    {
+    int largeur = m_OptionList[i].CommonName.size() + m_OptionList[i].Synonym.size();
+    if (largeur > largeurmax) largeurmax = largeur;
+    }
+
+  // Check that all required arguments are present on the command line
+  for (i = 0; i < m_OptionList.size(); ++i)
+    {
+    if (m_OptionList[i].CommonName != "--OTBTesting")
+      {
+      int largeur = m_OptionList[i].CommonName.size() + m_OptionList[i].Synonym.size();
+      os << "      ";
+      if (m_OptionList[i].Obligatory == false) os << "[";
+      else os << " ";
+      os << m_OptionList[i].CommonName;
+      if (m_OptionList[i].Synonym.empty() == false)
+        {
+        os << "|" << m_OptionList[i].Synonym;
+        }
+      if (m_OptionList[i].Obligatory == false) os << "]";
+      else os << " ";
+//Align the text
+      for (int b = largeur; b < largeurmax; b++)
+        os << " ";
+      os <<   "  :  " << m_OptionList[i].Description;
+      if (m_OptionList[i].NumberOfParametersFixed == true)
+        {
+        switch (m_OptionList[i].NumberOfParameters)
+          {
+          case 0:
+            break;
+          case 1:
+            os << "  (" << m_OptionList[i].NumberOfParameters << " parameter)";
+            break;
+          default:
+            os << "  (" << m_OptionList[i].NumberOfParameters << " parameters)";
+            break;
+          }
+        }
+      else
+        {
+        os << "  (N parameters)";
+        }
+      os << std::endl;
+      }
+    }
+  os << std::endl;
+}
+
+void CommandLineArgumentParser::PrintVersion(std::ostream& os) const
+{
+  os << " OTB Version : " << OTB_VERSION_STRING << std::endl;
+}
+
+}
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/CMakeLists.txt OTB-7.0.0/Modules/Core/CommandLineParser/test/CMakeLists.txt
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/test/CMakeLists.txt	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,64 @@
+#
+# Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+#
+# This file is part of Orfeo Toolbox
+#
+#     https://www.orfeo-toolbox.org/
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+otb_module_test()
+set(OTBCommandLineParserTests
+  otbTestCommandLineArgumentParser.cxx
+  otbTestCommandLineArgumentParserHelp.cxx
+  otbTestCommandLineArgumentParserList.cxx
+  otbTestCommandLineArgumentParserWithError.cxx
+  otbCommandLineParserTestDriver.cxx  )
+
+add_executable(otbCommandLineParserTestDriver ${OTBCommandLineParserTests})
+target_link_libraries(otbCommandLineParserTestDriver ${OTBCommandLineParser-Test_LIBRARIES})
+otb_module_target_label(otbCommandLineParserTestDriver)
+otb_add_test(NAME coTuCmdLineArgParserDeuxEntiers_ExactNumberArg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParser
+  -image image.png -entier 150 -double 12.25 -deuxentiers 78 56 )
+otb_add_test(NAME coTuCmdLineArgParserHelpWithArg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserHelp
+  --help -image image.png)
+otb_add_test(NAME coTuCmdLineArgParserHelpWithoutArg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserHelp
+  --help)
+otb_add_test(NAME coTuCmdLineArgParser_List2Arg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserList
+  -image image.png -entier 150 -double 12.25 -deuxentiers 78 56 -doubles 1.0 2.0)
+otb_add_test(NAME coTuCmdLineArgParser_List2ArgBis COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserList
+  -image image.png -entier 150 -double 12.25 -doubles 1.0 2.0 -deuxentiers 78 56 )
+otb_add_test(NAME coTuCmdLineArgParser_EmptyList COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserList
+  -image image.png -entier 150 -double 12.25 -deuxentiers 78 56 -doubles)
+otb_add_test(NAME coTuCmdLineArgParser_List1Arg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserList
+  -image image.png -entier 150 -double 12.25 -deuxentiers 78 56 -doubles 1.0 2.5)
+otb_add_test(NAME coTuCmdLineArgParser_List3ArgWithError COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserList
+  -image image.png -entier 150 -double 12.25 -deuxentiers 78 56 -doubles 1.0 2.5 -3.5)
+otb_add_test(NAME coTuCmdLineArgParserDeuxEntier_LessArg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserWithError
+  -image image.png -entier 150 -double 12.25 -deuxentiers 78 )
+otb_add_test(NAME coTuCmdLineArgParser_MissingObligatoryArg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserWithError
+  -entier 150 -double 12.25 -deuxentiers 78 56 32)
+otb_add_test(NAME coTuCmdLineArgParserDeuxEntier_MoreArg COMMAND otbCommandLineParserTestDriver
+  otbTestCommandLineArgumentParserWithError
+  -image image.png -entier 150 -double 12.25 -deuxentiers 78 56 32)
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbCommandLineParserTestDriver.cxx OTB-7.0.0/Modules/Core/CommandLineParser/test/otbCommandLineParserTestDriver.cxx
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbCommandLineParserTestDriver.cxx	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/test/otbCommandLineParserTestDriver.cxx	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+ *
+ * This file is part of Orfeo Toolbox
+ *
+ *     https://www.orfeo-toolbox.org/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "otbTestMain.h"
+
+void RegisterTests()
+{
+  REGISTER_TEST(otbTestCommandLineArgumentParser);
+  REGISTER_TEST(otbTestCommandLineArgumentParserHelp);
+  REGISTER_TEST(otbTestCommandLineArgumentParserList);
+  REGISTER_TEST(otbTestCommandLineArgumentParserWithError);
+}
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParser.cxx OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParser.cxx
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParser.cxx	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParser.cxx	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+ *
+ * This file is part of Orfeo Toolbox
+ *
+ *     https://www.orfeo-toolbox.org/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#include <iostream>
+
+#include "otbCommandLineArgumentParser.h"
+
+int otbTestCommandLineArgumentParser(int argc, char * argv[])
+{
+  // Parse command line parameters
+  typedef otb::CommandLineArgumentParser ParserType;
+  ParserType::Pointer parser = ParserType::New();
+
+  parser->AddOption("-image", "Nom d'une image", "-i", 1, true);
+  parser->AddOption("-entier", "Une Valeur entiere (obligatoire)", "-e");
+  parser->AddOption("-deuxentiers", "Deux Valeurs entieres non obligatoire", "-dede", 2, false);
+  parser->AddOption("-double", "Valeur reelle double", "-d");
+
+  typedef otb::CommandLineArgumentParseResult ParserResultType;
+  ParserResultType::Pointer parseResult = ParserResultType::New();
+
+  parser->ParseCommandLine(argc, argv, parseResult);
+
+  std::cout << "Image : " << parseResult->GetParameterString("-image") << std::endl;
+
+  unsigned int lEntier = parseResult->GetParameterUInt("-entier");
+  std::cout << "Entier : " << lEntier << std::endl;
+  if (parseResult->IsOptionPresent("-deuxentiers"))
+    {
+    std::cout << "Entier : " << lEntier << std::endl;
+    }
+  double lDouble = parseResult->GetParameterDouble("-double");
+  std::cout << "Double : " << lDouble << std::endl;
+
+  return EXIT_SUCCESS;
+}
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserHelp.cxx OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserHelp.cxx
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserHelp.cxx	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserHelp.cxx	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+ *
+ * This file is part of Orfeo Toolbox
+ *
+ *     https://www.orfeo-toolbox.org/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#include <iostream>
+
+#include "itkMacro.h"
+#include "otbCommandLineArgumentParser.h"
+
+int otbTestCommandLineArgumentParserHelp(int argc, char * argv[])
+{
+  try
+    {
+    // Parse command line parameters
+    typedef otb::CommandLineArgumentParser ParserType;
+    ParserType::Pointer parser = ParserType::New();
+
+    parser->AddOption("-image", "Nom d'une image", "-i", 1, true);
+
+    typedef otb::CommandLineArgumentParseResult ParserResultType;
+    ParserResultType::Pointer parseResult = ParserResultType::New();
+
+    parser->ParseCommandLine(argc, argv, parseResult);
+
+    std::cout << "Image : " << parseResult->GetParameterString("-image") << std::endl;
+    }
+  catch (CommandLineArgumentParserHelpException& err)
+    {
+    std::cerr << err;
+    return EXIT_SUCCESS;
+    }
+
+  return EXIT_FAILURE;
+}
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserList.cxx OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserList.cxx
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserList.cxx	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserList.cxx	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+ *
+ * This file is part of Orfeo Toolbox
+ *
+ *     https://www.orfeo-toolbox.org/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#include <iostream>
+
+#include "otbCommandLineArgumentParser.h"
+
+int otbTestCommandLineArgumentParserList(int argc, char * argv[])
+{
+  // Parse command line parameters
+  typedef otb::CommandLineArgumentParser ParserType;
+  ParserType::Pointer parser = ParserType::New();
+
+  parser->AddOption("-image", "Nom d'une image", "-i", 1, true);
+  parser->AddOption("-entier", "Une Valeur entiere (obligatoire)", "-e");
+  parser->AddOption("-deuxentiers", "Deux Valeurs entieres non obligatoire", "-dede", 2, false);
+  parser->AddOption("-double", "Valeur reelle double", "-d");
+  parser->AddOptionNParams("-doubles", "Liste de Valeurs reelles", "-ld", false);
+
+  typedef otb::CommandLineArgumentParseResult ParserResultType;
+  ParserResultType::Pointer parseResult = ParserResultType::New();
+
+  parser->ParseCommandLine(argc, argv, parseResult);
+
+  std::cout << "Image : " << parseResult->GetParameterString("-image") << std::endl;
+  //unsigned int lEntier = otb::GetParameter<unsigned int>(parseResult,"-entier");
+  unsigned int lEntier = parseResult->GetParameterUInt("-entier");
+  std::cout << "Entier : " << lEntier << std::endl;
+  if (parseResult->IsOptionPresent("-deuxentiers"))
+    {
+    //unsigned int lEntierDeux = otb::GetParameter<unsigned int>(parseResult,"-deuxentiers", 1);
+    unsigned int lEntierDeux = parseResult->GetParameterUInt("-deuxentiers", 1);
+    std::cout << "Entier : " << lEntierDeux << std::endl;
+    }
+  //double lDouble = otb::GetParameter<double>(parseResult,"-double");
+  double lDouble = parseResult->GetParameterDouble("-double");
+  std::cout << "Double : " << lDouble << std::endl;
+
+  std::cout << "List de Double : " << parseResult->GetNumberOfParameters("-doubles") << std::endl;
+  for (int i = 0; i < parseResult->GetNumberOfParameters("-doubles"); ++i)
+    {
+    //double value = otb::GetParameter<double>(parseResult,"-doubles", i);
+    double value = parseResult->GetParameterDouble("-doubles", i);
+    std::cout << "  " << value;
+    }
+  std::cout << std::endl;
+
+  return EXIT_SUCCESS;
+}
diff -ruN OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserWithError.cxx OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserWithError.cxx
--- OTB-7.0.0.orig/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserWithError.cxx	1970-01-01 01:00:00.000000000 +0100
+++ OTB-7.0.0/Modules/Core/CommandLineParser/test/otbTestCommandLineArgumentParserWithError.cxx	2020-02-21 16:44:02.363100805 +0100
@@ -0,0 +1,66 @@
+/*
+ * Copyright (C) 2005-2017 Centre National d'Etudes Spatiales (CNES)
+ *
+ * This file is part of Orfeo Toolbox
+ *
+ *     https://www.orfeo-toolbox.org/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#include <iostream>
+
+#include "itkMacro.h"
+#include "otbCommandLineArgumentParser.h"
+
+int otbTestCommandLineArgumentParserWithError(int argc, char * argv[])
+{
+  // Parse command line parameters
+  typedef otb::CommandLineArgumentParser ParserType;
+  ParserType::Pointer parser = ParserType::New();
+
+  parser->AddOption("-image", "Nom d'une image", "-i", 1, true);
+  parser->AddOption("-entier", "Une Valeur entiere (obligatoire)", "-e");
+  parser->AddOption("-deuxentiers", "Deux Valeurs entieres non obligatoire", "-dede", 2, false);
+  parser->AddOption("-double", "Valeur reelle double", "-d");
+
+  typedef otb::CommandLineArgumentParseResult ParserResultType;
+  ParserResultType::Pointer parseResult = ParserResultType::New();
+
+  try
+    {
+
+    parser->ParseCommandLine(argc, argv, parseResult);
+
+    std::cout << "Image : " << parseResult->GetParameterString("-image") << std::endl;
+    //unsigned int lEntier = otb::GetParameter<unsigned int>(parseResult,"-entier");
+    unsigned int lEntier = parseResult->GetParameterUInt("-entier");
+    std::cout << "Entier : " << lEntier << std::endl;
+    if (parseResult->IsOptionPresent("-deuxentiers"))
+      {
+      //unsigned int lEntierDeux = otb::GetParameter<unsigned int>(parseResult,"-deuxentiers", 1);
+      unsigned int lEntierDeux = parseResult->GetParameterUInt("-deuxentiers", 1);
+      std::cout << "Entier : " << lEntierDeux << std::endl;
+      }
+    //double lDouble = otb::GetParameter<double>(parseResult,"-double");
+    double lDouble = parseResult->GetParameterDouble("-double");
+    std::cout << "Double : " << lDouble << std::endl;
+    }
+  catch (CommandLineArgumentParserArgumentErrorException& err)
+    {
+    std::cerr << err;
+    return EXIT_SUCCESS;
+    }
+  return EXIT_FAILURE;
+}

