diff -burN InsightToolkit-4.7.2.orig/Modules/Core/Common/include/itkImageBase.h InsightToolkit-4.7.2/Modules/Core/Common/include/itkImageBase.h
--- InsightToolkit-4.7.2.orig/Modules/Core/Common/include/itkImageBase.h	2015-05-01 00:43:19.000000000 +0200
+++ InsightToolkit-4.7.2/Modules/Core/Common/include/itkImageBase.h	2017-12-13 15:07:28.000000000 +0100
@@ -707,6 +707,56 @@
    * \sa  ReleaseData, Initialize, SetBufferedRegion */
   virtual void InitializeBufferedRegion(void);
 
+// MACCS 4.3 optimization
+  /** Get a direct access to the region object that defines the size and starting index
+   * of the region of the image currently loaded in memory.
+   * Unlike \c GetBufferedRegion(), this function is not virtual and
+   * only aimed at \c itk::Image<>.
+   * \sa ImageRegion, SetLargestPossibleRegion(), SetRequestedRegion()
+   */
+  const RegionType& DoGetBufferedRegion() const
+  { return m_BufferedRegion;}
+
+  /** Directly compute an offset from the beginning of the buffer for a pixel
+   * at the specified index.
+   * The index is not checked as to whether it
+   * is inside the current buffer, so the computed offset could
+   * conceivably be outside the buffer. If bounds checking is needed,
+   * one can call \c ImageRegion::IsInside(ind) on the BufferedRegion
+   * prior to calling ComputeOffset.
+   * \warning unlike \c ComputeOffset(), this version does not incur a
+   * virtual call. It's meant to be used only for \c itk::image<>.
+   */
+
+  inline OffsetValueType DoComputeOffset(const IndexType &ind) const
+    {
+    OffsetValueType offset = 0;
+    ImageHelper<VImageDimension,VImageDimension>::ComputeOffset(this->DoGetBufferedRegion().GetIndex(),
+                                                                ind,
+                                                                m_OffsetTable,
+                                                                offset);
+    return offset;
+    }
+  /** Directly compute the index of the pixel at a specified offset from the
+   * beginning of the buffered region.
+   * Bounds checking is not performed. Thus, the computed index could be
+   * outside the BufferedRegion. To ensure a valid index, the parameter
+   * \c offset should be between 0 and the number of pixels in the
+   * BufferedRegion (the latter can be found using
+   * \c ImageRegion::GetNumberOfPixels()).
+   * \warning unlike \c ComputeIndex(), this version does not incur a
+   * virtual call. It's meant to be used only for \c itk::image<>.
+   */
+  inline IndexType DoComputeIndex(OffsetValueType offset) const
+    {
+    IndexType index;
+    const IndexType &bufferedRegionIndex = this->DoGetBufferedRegion().GetIndex();
+    ImageHelper<VImageDimension,VImageDimension>::ComputeIndex(bufferedRegionIndex,
+                                                               offset,
+                                                               m_OffsetTable,
+                                                               index);
+    return index;
+    }
 private:
   ImageBase(const Self &);      //purposely not implemented
   void operator=(const Self &); //purposely not implemented
