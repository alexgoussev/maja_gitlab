#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jan 11 11:05:07 2018 by generateDS.py version 2.29.2.
# Python 2.7.14 (default, Dec  5 2017, 13:55:53)  [GCC 4.4.7 20120313 (Red Hat 4.4.7-18)]
#
# Command line options:
#   ('-o', 'maja_xml_app_lutmap.py')
#   ('-s', 'lib.py')
#   ('--member-specs', 'dict')
#
# Command line arguments:
#   /home/besquis/LUTMap_Maja_Ng.xsd
#
# Command line:
#   /usr/local/bin/generateDS -o "maja_xml_app_lutmap.py" -s "lib.py" --member-specs="dict" /home/besquis/LUTMap_Maja_Ng.xsd
#
# Current working directory (os.getcwd()):
#   CirrusCorrection
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_

Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = str
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#


try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')

        class _FixedOffsetTZ(datetime_.tzinfo):

            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=''):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data

        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values

        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')

        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values

        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data

        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values

        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()

        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0',):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds,)
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path

        Tag_strip_pattern_ = re_.compile(r'\{.*\}')

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            return None

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in list(mapping.items())))

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, str):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

        def __eq__(self, other):
            if not isinstance(self, type(other)):
                return False
            return self.__dict__ == other.__dict__

        def __ne__(self, other):
            return not self.__eq__(other)

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

# # from IPython.Shell import IPShellEmbed
# # args = ''
# # ipshell = IPShellEmbed(args,
# #     banner = 'Dropping into IPython',
# #     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name,))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline,)
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:  # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))

    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:  # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:  # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):

    def __init__(self, name='', data_type='', container=0,
                 optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional

    def set_name(self, name): self.name = name

    def get_name(self): return self.name

    def set_data_type(self, data_type): self.data_type = data_type

    def get_data_type_chain(self): return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def set_container(self, container): self.container = container

    def get_container(self): return self.container

    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs

    def get_child_attrs(self): return self.child_attrs

    def set_choice(self, choice): self.choice = choice

    def get_choice(self): return self.choice

    def set_optional(self, optional): self.optional = optional

    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class LUTMap(GeneratedsSuper):
    member_data_items_ = {
        'LUT': MemberSpec_(
            'LUT', 'LUT', 1, 0, {
                'maxOccurs': 'unbounded', 'type': 'LUT', 'ref': 'LUT', 'name': 'LUT', 'minOccurs': '1'}, None), }
    subclass = None
    superclass = None

    def __init__(self, LUT=None):
        self.original_tagname_ = None
        if LUT is None:
            self.LUT = []
        else:
            self.LUT = LUT

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LUTMap)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LUTMap.subclass:
            return LUTMap.subclass(*args_, **kwargs_)
        else:
            return LUTMap(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_LUT(self): return self.LUT

    def set_LUT(self, LUT): self.LUT = LUT

    def add_LUT(self, value): self.LUT.append(value)

    def insert_LUT_at(self, index, value): self.LUT.insert(index, value)

    def replace_LUT_at(self, index, value): self.LUT[index] = value

    def hasContent_(self):
        if (
            self.LUT
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='LUTMap', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LUTMap')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LUTMap')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LUTMap', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LUTMap'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='LUTMap', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LUT_ in self.LUT:
            LUT_.export(outfile, level, namespace_, name_='LUT', pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LUT':
            obj_ = LUT.factory()
            obj_.build(child_)
            self.LUT.append(obj_)
            obj_.original_tagname_ = 'LUT'
# end class LUTMap


class LUT(GeneratedsSuper):
    member_data_items_ = {
        'index': MemberSpec_(
            'index', 'xs:nonNegativeInteger', 0, 1, {
                'use': 'optional'}), 'Indexes': MemberSpec_(
            'Indexes', 'IndexesType', 0, 0, {
                'type': 'IndexesType', 'name': 'Indexes'}, None), 'List_Of_Files': MemberSpec_(
            'List_Of_Files', 'List_Of_FilesType', 0, 0, {
                'type': 'List_Of_FilesType', 'name': 'List_Of_Files'}, None), }
    subclass = None
    superclass = None

    def __init__(self, index=None, Indexes=None, List_Of_Files=None):
        self.original_tagname_ = None
        self.index = _cast(int, index)
        self.Indexes = Indexes
        self.List_Of_Files = List_Of_Files

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LUT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LUT.subclass:
            return LUT.subclass(*args_, **kwargs_)
        else:
            return LUT(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Indexes(self): return self.Indexes

    def set_Indexes(self, Indexes): self.Indexes = Indexes

    def get_List_Of_Files(self): return self.List_Of_Files

    def set_List_Of_Files(self, List_Of_Files): self.List_Of_Files = List_Of_Files

    def get_index(self): return self.index

    def set_index(self, index): self.index = index

    def hasContent_(self):
        if (
            self.Indexes is not None or
            self.List_Of_Files is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='LUT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LUT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LUT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LUT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LUT'):
        if self.index is not None and 'index' not in already_processed:
            already_processed.add('index')
            outfile.write(' index="%s"' % self.gds_format_integer(self.index, input_name='index'))

    def exportChildren(self, outfile, level, namespace_='', name_='LUT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Indexes is not None:
            self.Indexes.export(outfile, level, namespace_, name_='Indexes', pretty_print=pretty_print)
        if self.List_Of_Files is not None:
            self.List_Of_Files.export(outfile, level, namespace_, name_='List_Of_Files', pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.add('index')
            try:
                self.index = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.index < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Indexes':
            obj_ = IndexesType.factory()
            obj_.build(child_)
            self.Indexes = obj_
            obj_.original_tagname_ = 'Indexes'
        elif nodeName_ == 'List_Of_Files':
            obj_ = List_Of_FilesType.factory()
            obj_.build(child_)
            self.List_Of_Files = obj_
            obj_.original_tagname_ = 'List_Of_Files'
# end class LUT


class IndexesType(GeneratedsSuper):
    member_data_items_ = {
        'Solar_Zenith_Angle_Indexes': MemberSpec_(
            'Solar_Zenith_Angle_Indexes', 'xs:string', 0, 1, {
                'type': 'xs:string', 'name': 'Solar_Zenith_Angle_Indexes', 'minOccurs': '0'}, None), 'View_Zenith_Angle_Indexes': MemberSpec_(
            'View_Zenith_Angle_Indexes', 'xs:string', 0, 1, {
                'type': 'xs:string', 'name': 'View_Zenith_Angle_Indexes', 'minOccurs': '0'}, None), 'Relative_Azimuth_Angle_Indexes': MemberSpec_(
            'Relative_Azimuth_Angle_Indexes', 'xs:string', 0, 1, {
                'maxOccurs': '1', 'type': 'xs:string', 'name': 'Relative_Azimuth_Angle_Indexes', 'minOccurs': '0'}, None), 'Altitude_Indexes': MemberSpec_(
            'Altitude_Indexes', 'xs:string', 0, 1, {
                'type': 'xs:string', 'name': 'Altitude_Indexes', 'minOccurs': '0'}, None), 'AOT_Indexes': MemberSpec_(
            'AOT_Indexes', 'xs:string', 0, 1, {
                'type': 'xs:string', 'name': 'AOT_Indexes', 'minOccurs': '0'}, None), 'TOA_Reflectance_Indexes': MemberSpec_(
            'TOA_Reflectance_Indexes', 'xs:string', 0, 1, {
                'type': 'xs:string', 'name': 'TOA_Reflectance_Indexes', 'minOccurs': '0'}, None), 'Zenithal_Angle_Indexes': MemberSpec_(
            'Zenithal_Angle_Indexes', 'xs:string', 0, 1, {
                'type': 'xs:string', 'name': 'Zenithal_Angle_Indexes', 'minOccurs': '0'}, None), 'Reflectance_Ratio_Indexes': MemberSpec_(
            'Reflectance_Ratio_Indexes', 'xs:string', 0, 1, {
                'type': 'xs:string', 'name': 'Reflectance_Ratio_Indexes', 'minOccurs': '0'}, None), }
    subclass = None
    superclass = None

    def __init__(
            self,
            Solar_Zenith_Angle_Indexes=None,
            View_Zenith_Angle_Indexes=None,
            Relative_Azimuth_Angle_Indexes=None,
            Altitude_Indexes=None,
            AOT_Indexes=None,
            TOA_Reflectance_Indexes=None,
            Zenithal_Angle_Indexes=None,
            Reflectance_Ratio_Indexes=None):
        self.original_tagname_ = None
        self.Solar_Zenith_Angle_Indexes = Solar_Zenith_Angle_Indexes
        self.View_Zenith_Angle_Indexes = View_Zenith_Angle_Indexes
        self.Relative_Azimuth_Angle_Indexes = Relative_Azimuth_Angle_Indexes
        self.Altitude_Indexes = Altitude_Indexes
        self.AOT_Indexes = AOT_Indexes
        self.TOA_Reflectance_Indexes = TOA_Reflectance_Indexes
        self.Zenithal_Angle_Indexes = Zenithal_Angle_Indexes
        self.Reflectance_Ratio_Indexes = Reflectance_Ratio_Indexes

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndexesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndexesType.subclass:
            return IndexesType.subclass(*args_, **kwargs_)
        else:
            return IndexesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Solar_Zenith_Angle_Indexes(self): return self.Solar_Zenith_Angle_Indexes

    def set_Solar_Zenith_Angle_Indexes(
        self, Solar_Zenith_Angle_Indexes): self.Solar_Zenith_Angle_Indexes = Solar_Zenith_Angle_Indexes

    def get_View_Zenith_Angle_Indexes(self): return self.View_Zenith_Angle_Indexes

    def set_View_Zenith_Angle_Indexes(
        self, View_Zenith_Angle_Indexes): self.View_Zenith_Angle_Indexes = View_Zenith_Angle_Indexes

    def get_Relative_Azimuth_Angle_Indexes(self): return self.Relative_Azimuth_Angle_Indexes

    def set_Relative_Azimuth_Angle_Indexes(
        self, Relative_Azimuth_Angle_Indexes): self.Relative_Azimuth_Angle_Indexes = Relative_Azimuth_Angle_Indexes

    def get_Altitude_Indexes(self): return self.Altitude_Indexes

    def set_Altitude_Indexes(self, Altitude_Indexes): self.Altitude_Indexes = Altitude_Indexes

    def get_AOT_Indexes(self): return self.AOT_Indexes

    def set_AOT_Indexes(self, AOT_Indexes): self.AOT_Indexes = AOT_Indexes

    def get_TOA_Reflectance_Indexes(self): return self.TOA_Reflectance_Indexes

    def set_TOA_Reflectance_Indexes(
        self, TOA_Reflectance_Indexes): self.TOA_Reflectance_Indexes = TOA_Reflectance_Indexes

    def get_Zenithal_Angle_Indexes(self): return self.Zenithal_Angle_Indexes

    def set_Zenithal_Angle_Indexes(self, Zenithal_Angle_Indexes): self.Zenithal_Angle_Indexes = Zenithal_Angle_Indexes

    def get_Reflectance_Ratio_Indexes(self): return self.Reflectance_Ratio_Indexes

    def set_Reflectance_Ratio_Indexes(
        self, Reflectance_Ratio_Indexes): self.Reflectance_Ratio_Indexes = Reflectance_Ratio_Indexes

    def hasContent_(self):
        if (
            self.Solar_Zenith_Angle_Indexes is not None or
            self.View_Zenith_Angle_Indexes is not None or
            self.Relative_Azimuth_Angle_Indexes is not None or
            self.Altitude_Indexes is not None or
            self.AOT_Indexes is not None or
            self.TOA_Reflectance_Indexes is not None or
            self.Zenithal_Angle_Indexes is not None or
            self.Reflectance_Ratio_Indexes is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='IndexesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndexesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndexesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IndexesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IndexesType'):
        pass

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='',
            name_='IndexesType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Solar_Zenith_Angle_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<Solar_Zenith_Angle_Indexes>%s</Solar_Zenith_Angle_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.Solar_Zenith_Angle_Indexes),
                        input_name='Solar_Zenith_Angle_Indexes')),
                    eol_))
        if self.View_Zenith_Angle_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<View_Zenith_Angle_Indexes>%s</View_Zenith_Angle_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.View_Zenith_Angle_Indexes),
                        input_name='View_Zenith_Angle_Indexes')),
                    eol_))
        if self.Relative_Azimuth_Angle_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<Relative_Azimuth_Angle_Indexes>%s</Relative_Azimuth_Angle_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.Relative_Azimuth_Angle_Indexes),
                        input_name='Relative_Azimuth_Angle_Indexes')),
                    eol_))
        if self.Altitude_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<Altitude_Indexes>%s</Altitude_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.Altitude_Indexes),
                        input_name='Altitude_Indexes')),
                    eol_))
        if self.AOT_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<AOT_Indexes>%s</AOT_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.AOT_Indexes),
                        input_name='AOT_Indexes')),
                    eol_))
        if self.TOA_Reflectance_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<TOA_Reflectance_Indexes>%s</TOA_Reflectance_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.TOA_Reflectance_Indexes),
                        input_name='TOA_Reflectance_Indexes')),
                    eol_))
        if self.Zenithal_Angle_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<Zenithal_Angle_Indexes>%s</Zenithal_Angle_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.Zenithal_Angle_Indexes),
                        input_name='Zenithal_Angle_Indexes')),
                    eol_))
        if self.Reflectance_Ratio_Indexes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<Reflectance_Ratio_Indexes>%s</Reflectance_Ratio_Indexes>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(
                            self.Reflectance_Ratio_Indexes),
                        input_name='Reflectance_Ratio_Indexes')),
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Solar_Zenith_Angle_Indexes':
            Solar_Zenith_Angle_Indexes_ = child_.text
            Solar_Zenith_Angle_Indexes_ = self.gds_validate_string(
                Solar_Zenith_Angle_Indexes_, node, 'Solar_Zenith_Angle_Indexes')
            self.Solar_Zenith_Angle_Indexes = Solar_Zenith_Angle_Indexes_
        elif nodeName_ == 'View_Zenith_Angle_Indexes':
            View_Zenith_Angle_Indexes_ = child_.text
            View_Zenith_Angle_Indexes_ = self.gds_validate_string(
                View_Zenith_Angle_Indexes_, node, 'View_Zenith_Angle_Indexes')
            self.View_Zenith_Angle_Indexes = View_Zenith_Angle_Indexes_
        elif nodeName_ == 'Relative_Azimuth_Angle_Indexes':
            Relative_Azimuth_Angle_Indexes_ = child_.text
            Relative_Azimuth_Angle_Indexes_ = self.gds_validate_string(
                Relative_Azimuth_Angle_Indexes_, node, 'Relative_Azimuth_Angle_Indexes')
            self.Relative_Azimuth_Angle_Indexes = Relative_Azimuth_Angle_Indexes_
        elif nodeName_ == 'Altitude_Indexes':
            Altitude_Indexes_ = child_.text
            Altitude_Indexes_ = self.gds_validate_string(Altitude_Indexes_, node, 'Altitude_Indexes')
            self.Altitude_Indexes = Altitude_Indexes_
        elif nodeName_ == 'AOT_Indexes':
            AOT_Indexes_ = child_.text
            AOT_Indexes_ = self.gds_validate_string(AOT_Indexes_, node, 'AOT_Indexes')
            self.AOT_Indexes = AOT_Indexes_
        elif nodeName_ == 'TOA_Reflectance_Indexes':
            TOA_Reflectance_Indexes_ = child_.text
            TOA_Reflectance_Indexes_ = self.gds_validate_string(
                TOA_Reflectance_Indexes_, node, 'TOA_Reflectance_Indexes')
            self.TOA_Reflectance_Indexes = TOA_Reflectance_Indexes_
        elif nodeName_ == 'Zenithal_Angle_Indexes':
            Zenithal_Angle_Indexes_ = child_.text
            Zenithal_Angle_Indexes_ = self.gds_validate_string(Zenithal_Angle_Indexes_, node, 'Zenithal_Angle_Indexes')
            self.Zenithal_Angle_Indexes = Zenithal_Angle_Indexes_
        elif nodeName_ == 'Reflectance_Ratio_Indexes':
            Reflectance_Ratio_Indexes_ = child_.text
            Reflectance_Ratio_Indexes_ = self.gds_validate_string(
                Reflectance_Ratio_Indexes_, node, 'Reflectance_Ratio_Indexes')
            self.Reflectance_Ratio_Indexes = Reflectance_Ratio_Indexes_
# end class IndexesType


class List_Of_FilesType(GeneratedsSuper):
    member_data_items_ = {
        'count': MemberSpec_(
            'count', 'xs:positiveInteger', 0, 1, {
                'use': 'optional'}), 'Relative_File_Path': MemberSpec_(
            'Relative_File_Path', 'xs:string', 1, 0, {
                'maxOccurs': 'unbounded', 'type': 'xs:string', 'name': 'Relative_File_Path'}, None), }
    subclass = None
    superclass = None

    def __init__(self, count=None, Relative_File_Path=None):
        self.original_tagname_ = None
        self.count = _cast(int, count)
        if Relative_File_Path is None:
            self.Relative_File_Path = []
        else:
            self.Relative_File_Path = Relative_File_Path

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_Of_FilesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_Of_FilesType.subclass:
            return List_Of_FilesType.subclass(*args_, **kwargs_)
        else:
            return List_Of_FilesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Relative_File_Path(self): return self.Relative_File_Path

    def set_Relative_File_Path(self, Relative_File_Path): self.Relative_File_Path = Relative_File_Path

    def add_Relative_File_Path(self, value): self.Relative_File_Path.append(value)

    def insert_Relative_File_Path_at(self, index, value): self.Relative_File_Path.insert(index, value)

    def replace_Relative_File_Path_at(self, index, value): self.Relative_File_Path[index] = value

    def get_count(self): return self.count

    def set_count(self, count): self.count = count

    def hasContent_(self):
        if (
            self.Relative_File_Path
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='List_Of_FilesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_Of_FilesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_Of_FilesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_Of_FilesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_Of_FilesType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='',
            name_='List_Of_FilesType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Relative_File_Path_ in self.Relative_File_Path:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<Relative_File_Path>%s</Relative_File_Path>%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_xml(Relative_File_Path_),
                        input_name='Relative_File_Path')),
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            try:
                self.count = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.count <= 0:
                raise_parse_error(node, 'Invalid PositiveInteger')

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Relative_File_Path':
            Relative_File_Path_ = child_.text
            Relative_File_Path_ = self.gds_validate_string(Relative_File_Path_, node, 'Relative_File_Path')
            self.Relative_File_Path.append(Relative_File_Path_)
# end class List_Of_FilesType


GDSClassesMapping = {
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    LOGGER.debug(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LUTMap'
        rootClass = LUTMap
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LUTMap'
        rootClass = LUTMap
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from io import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LUTMap'
        rootClass = LUTMap
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LUTMap'
        rootClass = LUTMap
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from maja_xml_app_lutmap import *\n\n')
        sys.stdout.write('import maja_xml_app_lutmap as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    # import pdb; pdb.set_trace()
    main()

__all__ = [
    "IndexesType",
    "LUT",
    "LUTMap",
    "List_Of_FilesType"
]
