#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Sep 19 15:37:35 2019 by generateDS.py version 2.29.2.
# Python 2.7.14 (default, Dec  5 2017, 13:55:53)  [GCC 4.4.7 20120313 (Red Hat 4.4.7-18)]
#
# Command line options:
#   ('-o', 'SimpleAOTReader.py')
#
# Command line arguments:
#   Simple_AOT.xsd
#
# Command line:
#   /usr/local/bin/generateDS -o "SimpleAOTReader.py" Simple_AOT.xsd
#
# Current working directory (os.getcwd()):
#   Bouzin_Maja
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AOT_Estimation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AOT_Method=None, AOT_KPondCAMS=None, AOT_HeightScale=None, Multi_Spectral_Method=None, Multi_Temporal_Method=None, Spectro_Temporal_Method=None, AOT_Max_Age=None, Default_AOT=None, Step_AOT=None, Sampling_Interval_Min=None, Sampling_Interval_Max=None, N_Pix_Min=None, Increment_N_Distance=None, Dark_Band_Code=None, SE_Valid_AOT_Radius=None, SE_Mask_Dilatation_Radius=None, Half_Window_Size=None, W_dark=None, W_bounds=None, AOT_min=None, F_Tolerance=None, G_Tolerance=None, X_Tolerance=None, Epsilon_Function=None, Max_Iterations=None, AOT_initial_D=None, Init_Window_Radius=None, Max_Window_Radius=None, Sigma_Smoothing_AOT=None):
        self.original_tagname_ = None
        self.AOT_Method = AOT_Method
        self.AOT_KPondCAMS = AOT_KPondCAMS
        self.AOT_HeightScale = AOT_HeightScale
        self.Multi_Spectral_Method = Multi_Spectral_Method
        self.Multi_Temporal_Method = Multi_Temporal_Method
        self.Spectro_Temporal_Method = Spectro_Temporal_Method
        self.AOT_Max_Age = AOT_Max_Age
        self.Default_AOT = Default_AOT
        self.Step_AOT = Step_AOT
        self.Sampling_Interval_Min = Sampling_Interval_Min
        self.Sampling_Interval_Max = Sampling_Interval_Max
        self.N_Pix_Min = N_Pix_Min
        self.Increment_N_Distance = Increment_N_Distance
        self.Dark_Band_Code = Dark_Band_Code
        self.SE_Valid_AOT_Radius = SE_Valid_AOT_Radius
        self.SE_Mask_Dilatation_Radius = SE_Mask_Dilatation_Radius
        self.Half_Window_Size = Half_Window_Size
        self.W_dark = W_dark
        self.W_bounds = W_bounds
        self.AOT_min = AOT_min
        self.F_Tolerance = F_Tolerance
        self.G_Tolerance = G_Tolerance
        self.X_Tolerance = X_Tolerance
        self.Epsilon_Function = Epsilon_Function
        self.Max_Iterations = Max_Iterations
        self.AOT_initial_D = AOT_initial_D
        self.Init_Window_Radius = Init_Window_Radius
        self.Max_Window_Radius = Max_Window_Radius
        self.Sigma_Smoothing_AOT = Sigma_Smoothing_AOT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AOT_Estimation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AOT_Estimation.subclass:
            return AOT_Estimation.subclass(*args_, **kwargs_)
        else:
            return AOT_Estimation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AOT_Method(self): return self.AOT_Method
    def set_AOT_Method(self, AOT_Method): self.AOT_Method = AOT_Method
    def get_AOT_KPondCAMS(self): return self.AOT_KPondCAMS
    def set_AOT_KPondCAMS(self, AOT_KPondCAMS): self.AOT_KPondCAMS = AOT_KPondCAMS
    def get_AOT_HeightScale(self): return self.AOT_HeightScale
    def set_AOT_HeightScale(self, AOT_HeightScale): self.AOT_HeightScale = AOT_HeightScale
    def get_Multi_Spectral_Method(self): return self.Multi_Spectral_Method
    def set_Multi_Spectral_Method(self, Multi_Spectral_Method): self.Multi_Spectral_Method = Multi_Spectral_Method
    def get_Multi_Temporal_Method(self): return self.Multi_Temporal_Method
    def set_Multi_Temporal_Method(self, Multi_Temporal_Method): self.Multi_Temporal_Method = Multi_Temporal_Method
    def get_Spectro_Temporal_Method(self): return self.Spectro_Temporal_Method
    def set_Spectro_Temporal_Method(self, Spectro_Temporal_Method): self.Spectro_Temporal_Method = Spectro_Temporal_Method
    def get_AOT_Max_Age(self): return self.AOT_Max_Age
    def set_AOT_Max_Age(self, AOT_Max_Age): self.AOT_Max_Age = AOT_Max_Age
    def get_Default_AOT(self): return self.Default_AOT
    def set_Default_AOT(self, Default_AOT): self.Default_AOT = Default_AOT
    def get_Step_AOT(self): return self.Step_AOT
    def set_Step_AOT(self, Step_AOT): self.Step_AOT = Step_AOT
    def get_Sampling_Interval_Min(self): return self.Sampling_Interval_Min
    def set_Sampling_Interval_Min(self, Sampling_Interval_Min): self.Sampling_Interval_Min = Sampling_Interval_Min
    def get_Sampling_Interval_Max(self): return self.Sampling_Interval_Max
    def set_Sampling_Interval_Max(self, Sampling_Interval_Max): self.Sampling_Interval_Max = Sampling_Interval_Max
    def get_N_Pix_Min(self): return self.N_Pix_Min
    def set_N_Pix_Min(self, N_Pix_Min): self.N_Pix_Min = N_Pix_Min
    def get_Increment_N_Distance(self): return self.Increment_N_Distance
    def set_Increment_N_Distance(self, Increment_N_Distance): self.Increment_N_Distance = Increment_N_Distance
    def get_Dark_Band_Code(self): return self.Dark_Band_Code
    def set_Dark_Band_Code(self, Dark_Band_Code): self.Dark_Band_Code = Dark_Band_Code
    def get_SE_Valid_AOT_Radius(self): return self.SE_Valid_AOT_Radius
    def set_SE_Valid_AOT_Radius(self, SE_Valid_AOT_Radius): self.SE_Valid_AOT_Radius = SE_Valid_AOT_Radius
    def get_SE_Mask_Dilatation_Radius(self): return self.SE_Mask_Dilatation_Radius
    def set_SE_Mask_Dilatation_Radius(self, SE_Mask_Dilatation_Radius): self.SE_Mask_Dilatation_Radius = SE_Mask_Dilatation_Radius
    def get_Half_Window_Size(self): return self.Half_Window_Size
    def set_Half_Window_Size(self, Half_Window_Size): self.Half_Window_Size = Half_Window_Size
    def get_W_dark(self): return self.W_dark
    def set_W_dark(self, W_dark): self.W_dark = W_dark
    def get_W_bounds(self): return self.W_bounds
    def set_W_bounds(self, W_bounds): self.W_bounds = W_bounds
    def get_AOT_min(self): return self.AOT_min
    def set_AOT_min(self, AOT_min): self.AOT_min = AOT_min
    def get_F_Tolerance(self): return self.F_Tolerance
    def set_F_Tolerance(self, F_Tolerance): self.F_Tolerance = F_Tolerance
    def get_G_Tolerance(self): return self.G_Tolerance
    def set_G_Tolerance(self, G_Tolerance): self.G_Tolerance = G_Tolerance
    def get_X_Tolerance(self): return self.X_Tolerance
    def set_X_Tolerance(self, X_Tolerance): self.X_Tolerance = X_Tolerance
    def get_Epsilon_Function(self): return self.Epsilon_Function
    def set_Epsilon_Function(self, Epsilon_Function): self.Epsilon_Function = Epsilon_Function
    def get_Max_Iterations(self): return self.Max_Iterations
    def set_Max_Iterations(self, Max_Iterations): self.Max_Iterations = Max_Iterations
    def get_AOT_initial_D(self): return self.AOT_initial_D
    def set_AOT_initial_D(self, AOT_initial_D): self.AOT_initial_D = AOT_initial_D
    def get_Init_Window_Radius(self): return self.Init_Window_Radius
    def set_Init_Window_Radius(self, Init_Window_Radius): self.Init_Window_Radius = Init_Window_Radius
    def get_Max_Window_Radius(self): return self.Max_Window_Radius
    def set_Max_Window_Radius(self, Max_Window_Radius): self.Max_Window_Radius = Max_Window_Radius
    def get_Sigma_Smoothing_AOT(self): return self.Sigma_Smoothing_AOT
    def set_Sigma_Smoothing_AOT(self, Sigma_Smoothing_AOT): self.Sigma_Smoothing_AOT = Sigma_Smoothing_AOT
    def hasContent_(self):
        if (
            self.AOT_Method is not None or
            self.AOT_KPondCAMS is not None or
            self.AOT_HeightScale is not None or
            self.Multi_Spectral_Method is not None or
            self.Multi_Temporal_Method is not None or
            self.Spectro_Temporal_Method is not None or
            self.AOT_Max_Age is not None or
            self.Default_AOT is not None or
            self.Step_AOT is not None or
            self.Sampling_Interval_Min is not None or
            self.Sampling_Interval_Max is not None or
            self.N_Pix_Min is not None or
            self.Increment_N_Distance is not None or
            self.Dark_Band_Code is not None or
            self.SE_Valid_AOT_Radius is not None or
            self.SE_Mask_Dilatation_Radius is not None or
            self.Half_Window_Size is not None or
            self.W_dark is not None or
            self.W_bounds is not None or
            self.AOT_min is not None or
            self.F_Tolerance is not None or
            self.G_Tolerance is not None or
            self.X_Tolerance is not None or
            self.Epsilon_Function is not None or
            self.Max_Iterations is not None or
            self.AOT_initial_D is not None or
            self.Init_Window_Radius is not None or
            self.Max_Window_Radius is not None or
            self.Sigma_Smoothing_AOT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AOT_Estimation', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AOT_Estimation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AOT_Estimation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AOT_Estimation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AOT_Estimation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AOT_Estimation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AOT_Method is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AOT_Method>%s</AOT_Method>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AOT_Method), input_name='AOT_Method')), eol_))
        if self.AOT_KPondCAMS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AOT_KPondCAMS>%s</AOT_KPondCAMS>%s' % (self.gds_format_double(self.AOT_KPondCAMS, input_name='AOT_KPondCAMS'), eol_))
        if self.AOT_HeightScale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AOT_HeightScale>%s</AOT_HeightScale>%s' % (self.gds_format_double(self.AOT_HeightScale, input_name='AOT_HeightScale'), eol_))
        if self.Multi_Spectral_Method is not None:
            self.Multi_Spectral_Method.export(outfile, level, namespace_, name_='Multi_Spectral_Method', pretty_print=pretty_print)
        if self.Multi_Temporal_Method is not None:
            self.Multi_Temporal_Method.export(outfile, level, namespace_, name_='Multi_Temporal_Method', pretty_print=pretty_print)
        if self.Spectro_Temporal_Method is not None:
            self.Spectro_Temporal_Method.export(outfile, level, namespace_, name_='Spectro_Temporal_Method', pretty_print=pretty_print)
        if self.AOT_Max_Age is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AOT_Max_Age>%s</AOT_Max_Age>%s' % (self.gds_format_integer(self.AOT_Max_Age, input_name='AOT_Max_Age'), eol_))
        if self.Default_AOT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Default_AOT>%s</Default_AOT>%s' % (self.gds_format_double(self.Default_AOT, input_name='Default_AOT'), eol_))
        if self.Step_AOT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Step_AOT>%s</Step_AOT>%s' % (self.gds_format_integer(self.Step_AOT, input_name='Step_AOT'), eol_))
        if self.Sampling_Interval_Min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Sampling_Interval_Min>%s</Sampling_Interval_Min>%s' % (self.gds_format_integer(self.Sampling_Interval_Min, input_name='Sampling_Interval_Min'), eol_))
        if self.Sampling_Interval_Max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Sampling_Interval_Max>%s</Sampling_Interval_Max>%s' % (self.gds_format_integer(self.Sampling_Interval_Max, input_name='Sampling_Interval_Max'), eol_))
        if self.N_Pix_Min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<N_Pix_Min>%s</N_Pix_Min>%s' % (self.gds_format_integer(self.N_Pix_Min, input_name='N_Pix_Min'), eol_))
        if self.Increment_N_Distance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Increment_N_Distance>%s</Increment_N_Distance>%s' % (self.gds_format_integer(self.Increment_N_Distance, input_name='Increment_N_Distance'), eol_))
        if self.Dark_Band_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Dark_Band_Code>%s</Dark_Band_Code>%s' % (self.gds_format_integer(self.Dark_Band_Code, input_name='Dark_Band_Code'), eol_))
        if self.SE_Valid_AOT_Radius is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SE_Valid_AOT_Radius>%s</SE_Valid_AOT_Radius>%s' % (self.gds_format_integer(self.SE_Valid_AOT_Radius, input_name='SE_Valid_AOT_Radius'), eol_))
        if self.SE_Mask_Dilatation_Radius is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SE_Mask_Dilatation_Radius>%s</SE_Mask_Dilatation_Radius>%s' % (self.gds_format_integer(self.SE_Mask_Dilatation_Radius, input_name='SE_Mask_Dilatation_Radius'), eol_))
        if self.Half_Window_Size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Half_Window_Size>%s</Half_Window_Size>%s' % (self.gds_format_integer(self.Half_Window_Size, input_name='Half_Window_Size'), eol_))
        if self.W_dark is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<W_dark>%s</W_dark>%s' % (self.gds_format_integer(self.W_dark, input_name='W_dark'), eol_))
        if self.W_bounds is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<W_bounds>%s</W_bounds>%s' % (self.gds_format_integer(self.W_bounds, input_name='W_bounds'), eol_))
        if self.AOT_min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AOT_min>%s</AOT_min>%s' % (self.gds_format_double(self.AOT_min, input_name='AOT_min'), eol_))
        if self.F_Tolerance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<F_Tolerance>%s</F_Tolerance>%s' % (self.gds_format_double(self.F_Tolerance, input_name='F_Tolerance'), eol_))
        if self.G_Tolerance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<G_Tolerance>%s</G_Tolerance>%s' % (self.gds_format_double(self.G_Tolerance, input_name='G_Tolerance'), eol_))
        if self.X_Tolerance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<X_Tolerance>%s</X_Tolerance>%s' % (self.gds_format_double(self.X_Tolerance, input_name='X_Tolerance'), eol_))
        if self.Epsilon_Function is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Epsilon_Function>%s</Epsilon_Function>%s' % (self.gds_format_double(self.Epsilon_Function, input_name='Epsilon_Function'), eol_))
        if self.Max_Iterations is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Max_Iterations>%s</Max_Iterations>%s' % (self.gds_format_integer(self.Max_Iterations, input_name='Max_Iterations'), eol_))
        if self.AOT_initial_D is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AOT_initial_D>%s</AOT_initial_D>%s' % (self.gds_format_double(self.AOT_initial_D, input_name='AOT_initial_D'), eol_))
        if self.Init_Window_Radius is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Init_Window_Radius>%s</Init_Window_Radius>%s' % (self.gds_format_integer(self.Init_Window_Radius, input_name='Init_Window_Radius'), eol_))
        if self.Max_Window_Radius is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Max_Window_Radius>%s</Max_Window_Radius>%s' % (self.gds_format_integer(self.Max_Window_Radius, input_name='Max_Window_Radius'), eol_))
        if self.Sigma_Smoothing_AOT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Sigma_Smoothing_AOT>%s</Sigma_Smoothing_AOT>%s' % (self.gds_format_integer(self.Sigma_Smoothing_AOT, input_name='Sigma_Smoothing_AOT'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AOT_Method':
            AOT_Method_ = child_.text
            AOT_Method_ = self.gds_validate_string(AOT_Method_, node, 'AOT_Method')
            self.AOT_Method = AOT_Method_
        elif nodeName_ == 'AOT_KPondCAMS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AOT_KPondCAMS')
            self.AOT_KPondCAMS = fval_
        elif nodeName_ == 'AOT_HeightScale':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AOT_HeightScale')
            self.AOT_HeightScale = fval_
        elif nodeName_ == 'Multi_Spectral_Method':
            obj_ = Multi_Spectral_MethodType.factory()
            obj_.build(child_)
            self.Multi_Spectral_Method = obj_
            obj_.original_tagname_ = 'Multi_Spectral_Method'
        elif nodeName_ == 'Multi_Temporal_Method':
            obj_ = Multi_Temporal_MethodType.factory()
            obj_.build(child_)
            self.Multi_Temporal_Method = obj_
            obj_.original_tagname_ = 'Multi_Temporal_Method'
        elif nodeName_ == 'Spectro_Temporal_Method':
            obj_ = Spectro_Temporal_MethodType.factory()
            obj_.build(child_)
            self.Spectro_Temporal_Method = obj_
            obj_.original_tagname_ = 'Spectro_Temporal_Method'
        elif nodeName_ == 'AOT_Max_Age':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'AOT_Max_Age')
            self.AOT_Max_Age = ival_
        elif nodeName_ == 'Default_AOT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Default_AOT')
            self.Default_AOT = fval_
        elif nodeName_ == 'Step_AOT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Step_AOT')
            self.Step_AOT = ival_
        elif nodeName_ == 'Sampling_Interval_Min':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Sampling_Interval_Min')
            self.Sampling_Interval_Min = ival_
        elif nodeName_ == 'Sampling_Interval_Max':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Sampling_Interval_Max')
            self.Sampling_Interval_Max = ival_
        elif nodeName_ == 'N_Pix_Min':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'N_Pix_Min')
            self.N_Pix_Min = ival_
        elif nodeName_ == 'Increment_N_Distance':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Increment_N_Distance')
            self.Increment_N_Distance = ival_
        elif nodeName_ == 'Dark_Band_Code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Dark_Band_Code')
            self.Dark_Band_Code = ival_
        elif nodeName_ == 'SE_Valid_AOT_Radius':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SE_Valid_AOT_Radius')
            self.SE_Valid_AOT_Radius = ival_
        elif nodeName_ == 'SE_Mask_Dilatation_Radius':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SE_Mask_Dilatation_Radius')
            self.SE_Mask_Dilatation_Radius = ival_
        elif nodeName_ == 'Half_Window_Size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Half_Window_Size')
            self.Half_Window_Size = ival_
        elif nodeName_ == 'W_dark':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'W_dark')
            self.W_dark = ival_
        elif nodeName_ == 'W_bounds':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'W_bounds')
            self.W_bounds = ival_
        elif nodeName_ == 'AOT_min':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AOT_min')
            self.AOT_min = fval_
        elif nodeName_ == 'F_Tolerance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'F_Tolerance')
            self.F_Tolerance = fval_
        elif nodeName_ == 'G_Tolerance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'G_Tolerance')
            self.G_Tolerance = fval_
        elif nodeName_ == 'X_Tolerance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'X_Tolerance')
            self.X_Tolerance = fval_
        elif nodeName_ == 'Epsilon_Function':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Epsilon_Function')
            self.Epsilon_Function = fval_
        elif nodeName_ == 'Max_Iterations':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Max_Iterations')
            self.Max_Iterations = ival_
        elif nodeName_ == 'AOT_initial_D':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AOT_initial_D')
            self.AOT_initial_D = fval_
        elif nodeName_ == 'Init_Window_Radius':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Init_Window_Radius')
            self.Init_Window_Radius = ival_
        elif nodeName_ == 'Max_Window_Radius':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Max_Window_Radius')
            self.Max_Window_Radius = ival_
        elif nodeName_ == 'Sigma_Smoothing_AOT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Sigma_Smoothing_AOT')
            self.Sigma_Smoothing_AOT = ival_
# end class AOT_Estimation


class Multi_Spectral_MethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MS_AOT_Band_Code=None, MS_AOT_Red_Band_Code=None, NDVI_AOT_Band1_Code=None, NDVI_AOT_Band2_Code=None, NDVI_Threshold=None, Red_TOA_Threshold=None, MS_Slope=None, MS_YIntercept=None, NDVI_Slope=None, NDVI_YIntercept=None, W_MS=None):
        self.original_tagname_ = None
        self.MS_AOT_Band_Code = MS_AOT_Band_Code
        self.validate_MS_AOT_Band_CodeType(self.MS_AOT_Band_Code)
        self.MS_AOT_Red_Band_Code = MS_AOT_Red_Band_Code
        self.NDVI_AOT_Band1_Code = NDVI_AOT_Band1_Code
        self.NDVI_AOT_Band2_Code = NDVI_AOT_Band2_Code
        self.NDVI_Threshold = NDVI_Threshold
        self.Red_TOA_Threshold = Red_TOA_Threshold
        self.MS_Slope = MS_Slope
        self.MS_YIntercept = MS_YIntercept
        self.NDVI_Slope = NDVI_Slope
        self.NDVI_YIntercept = NDVI_YIntercept
        self.W_MS = W_MS
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Multi_Spectral_MethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Multi_Spectral_MethodType.subclass:
            return Multi_Spectral_MethodType.subclass(*args_, **kwargs_)
        else:
            return Multi_Spectral_MethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MS_AOT_Band_Code(self): return self.MS_AOT_Band_Code
    def set_MS_AOT_Band_Code(self, MS_AOT_Band_Code): self.MS_AOT_Band_Code = MS_AOT_Band_Code
    def get_MS_AOT_Red_Band_Code(self): return self.MS_AOT_Red_Band_Code
    def set_MS_AOT_Red_Band_Code(self, MS_AOT_Red_Band_Code): self.MS_AOT_Red_Band_Code = MS_AOT_Red_Band_Code
    def get_NDVI_AOT_Band1_Code(self): return self.NDVI_AOT_Band1_Code
    def set_NDVI_AOT_Band1_Code(self, NDVI_AOT_Band1_Code): self.NDVI_AOT_Band1_Code = NDVI_AOT_Band1_Code
    def get_NDVI_AOT_Band2_Code(self): return self.NDVI_AOT_Band2_Code
    def set_NDVI_AOT_Band2_Code(self, NDVI_AOT_Band2_Code): self.NDVI_AOT_Band2_Code = NDVI_AOT_Band2_Code
    def get_NDVI_Threshold(self): return self.NDVI_Threshold
    def set_NDVI_Threshold(self, NDVI_Threshold): self.NDVI_Threshold = NDVI_Threshold
    def get_Red_TOA_Threshold(self): return self.Red_TOA_Threshold
    def set_Red_TOA_Threshold(self, Red_TOA_Threshold): self.Red_TOA_Threshold = Red_TOA_Threshold
    def get_MS_Slope(self): return self.MS_Slope
    def set_MS_Slope(self, MS_Slope): self.MS_Slope = MS_Slope
    def get_MS_YIntercept(self): return self.MS_YIntercept
    def set_MS_YIntercept(self, MS_YIntercept): self.MS_YIntercept = MS_YIntercept
    def get_NDVI_Slope(self): return self.NDVI_Slope
    def set_NDVI_Slope(self, NDVI_Slope): self.NDVI_Slope = NDVI_Slope
    def get_NDVI_YIntercept(self): return self.NDVI_YIntercept
    def set_NDVI_YIntercept(self, NDVI_YIntercept): self.NDVI_YIntercept = NDVI_YIntercept
    def get_W_MS(self): return self.W_MS
    def set_W_MS(self, W_MS): self.W_MS = W_MS
    def validate_MS_AOT_Band_CodeType(self, value):
        # Validate type MS_AOT_Band_CodeType, a restriction on xs:positiveInteger.
        pass
    def hasContent_(self):
        if (
            self.MS_AOT_Band_Code is not None or
            self.MS_AOT_Red_Band_Code is not None or
            self.NDVI_AOT_Band1_Code is not None or
            self.NDVI_AOT_Band2_Code is not None or
            self.NDVI_Threshold is not None or
            self.Red_TOA_Threshold is not None or
            self.MS_Slope is not None or
            self.MS_YIntercept is not None or
            self.NDVI_Slope is not None or
            self.NDVI_YIntercept is not None or
            self.W_MS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Multi_Spectral_MethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Multi_Spectral_MethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Multi_Spectral_MethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Multi_Spectral_MethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Multi_Spectral_MethodType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Multi_Spectral_MethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MS_AOT_Band_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MS_AOT_Band_Code>%s</MS_AOT_Band_Code>%s' % (self.gds_format_integer_list(self.MS_AOT_Band_Code, input_name='MS_AOT_Band_Code'), eol_))
        if self.MS_AOT_Red_Band_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MS_AOT_Red_Band_Code>%s</MS_AOT_Red_Band_Code>%s' % (self.gds_format_integer(self.MS_AOT_Red_Band_Code, input_name='MS_AOT_Red_Band_Code'), eol_))
        if self.NDVI_AOT_Band1_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NDVI_AOT_Band1_Code>%s</NDVI_AOT_Band1_Code>%s' % (self.gds_format_integer(self.NDVI_AOT_Band1_Code, input_name='NDVI_AOT_Band1_Code'), eol_))
        if self.NDVI_AOT_Band2_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NDVI_AOT_Band2_Code>%s</NDVI_AOT_Band2_Code>%s' % (self.gds_format_integer(self.NDVI_AOT_Band2_Code, input_name='NDVI_AOT_Band2_Code'), eol_))
        if self.NDVI_Threshold is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NDVI_Threshold>%s</NDVI_Threshold>%s' % (self.gds_format_double(self.NDVI_Threshold, input_name='NDVI_Threshold'), eol_))
        if self.Red_TOA_Threshold is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Red_TOA_Threshold>%s</Red_TOA_Threshold>%s' % (self.gds_format_double(self.Red_TOA_Threshold, input_name='Red_TOA_Threshold'), eol_))
        if self.MS_Slope is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MS_Slope>%s</MS_Slope>%s' % (self.gds_format_float(self.MS_Slope, input_name='MS_Slope'), eol_))
        if self.MS_YIntercept is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MS_YIntercept>%s</MS_YIntercept>%s' % (self.gds_format_float(self.MS_YIntercept, input_name='MS_YIntercept'), eol_))
        if self.NDVI_Slope is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NDVI_Slope>%s</NDVI_Slope>%s' % (self.gds_format_double(self.NDVI_Slope, input_name='NDVI_Slope'), eol_))
        if self.NDVI_YIntercept is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NDVI_YIntercept>%s</NDVI_YIntercept>%s' % (self.gds_format_double(self.NDVI_YIntercept, input_name='NDVI_YIntercept'), eol_))
        if self.W_MS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<W_MS>%s</W_MS>%s' % (self.gds_format_double(self.W_MS, input_name='W_MS'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MS_AOT_Band_Code':
            MS_AOT_Band_Code_ = child_.text
            MS_AOT_Band_Code_ = self.gds_validate_integer_list(MS_AOT_Band_Code_, node, 'MS_AOT_Band_Code')
            self.MS_AOT_Band_Code = MS_AOT_Band_Code_
            # validate type MS_AOT_Band_CodeType
            self.validate_MS_AOT_Band_CodeType(self.MS_AOT_Band_Code)
        elif nodeName_ == 'MS_AOT_Red_Band_Code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'MS_AOT_Red_Band_Code')
            self.MS_AOT_Red_Band_Code = ival_
        elif nodeName_ == 'NDVI_AOT_Band1_Code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NDVI_AOT_Band1_Code')
            self.NDVI_AOT_Band1_Code = ival_
        elif nodeName_ == 'NDVI_AOT_Band2_Code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NDVI_AOT_Band2_Code')
            self.NDVI_AOT_Band2_Code = ival_
        elif nodeName_ == 'NDVI_Threshold':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NDVI_Threshold')
            self.NDVI_Threshold = fval_
        elif nodeName_ == 'Red_TOA_Threshold':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Red_TOA_Threshold')
            self.Red_TOA_Threshold = fval_
        elif nodeName_ == 'MS_Slope':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MS_Slope')
            self.MS_Slope = fval_
        elif nodeName_ == 'MS_YIntercept':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MS_YIntercept')
            self.MS_YIntercept = fval_
        elif nodeName_ == 'NDVI_Slope':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NDVI_Slope')
            self.NDVI_Slope = fval_
        elif nodeName_ == 'NDVI_YIntercept':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NDVI_YIntercept')
            self.NDVI_YIntercept = fval_
        elif nodeName_ == 'W_MS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'W_MS')
            self.W_MS = fval_
# end class Multi_Spectral_MethodType


class Multi_Temporal_MethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MT_AOT_Band_Code_D=None, MT_AOT_Band_Reflectance_Composite_Dm1=None, MT_AOT_Band_LUT_Composite_Dm1=None, Var_Band_Code_D=None, Var_Band_Code_Dm1=None, Relative_Var_Max=None, W_MT_equation2=None, Stdev_Band_Code=None, Stdev_Min=None, Std_Noise=None, AOT_initial_Dm1=None, First_AOT=None, Second_AOT=None, TOA_Reflectance_Min=None, TOA_Reflectance_Max=None, TOA_Reflectance_Step=None, Min_Difference_Thresholds_Calculation=None):
        self.original_tagname_ = None
        self.MT_AOT_Band_Code_D = MT_AOT_Band_Code_D
        self.validate_MT_AOT_Band_Code_DType(self.MT_AOT_Band_Code_D)
        self.MT_AOT_Band_Reflectance_Composite_Dm1 = MT_AOT_Band_Reflectance_Composite_Dm1
        self.validate_MT_AOT_Band_Reflectance_Composite_Dm1Type(self.MT_AOT_Band_Reflectance_Composite_Dm1)
        self.MT_AOT_Band_LUT_Composite_Dm1 = MT_AOT_Band_LUT_Composite_Dm1
        self.validate_MT_AOT_Band_LUT_Composite_Dm1Type(self.MT_AOT_Band_LUT_Composite_Dm1)
        self.Var_Band_Code_D = Var_Band_Code_D
        self.Var_Band_Code_Dm1 = Var_Band_Code_Dm1
        self.Relative_Var_Max = Relative_Var_Max
        self.W_MT_equation2 = W_MT_equation2
        self.Stdev_Band_Code = Stdev_Band_Code
        self.Stdev_Min = Stdev_Min
        self.Std_Noise = Std_Noise
        self.AOT_initial_Dm1 = AOT_initial_Dm1
        self.First_AOT = First_AOT
        self.Second_AOT = Second_AOT
        self.TOA_Reflectance_Min = TOA_Reflectance_Min
        self.TOA_Reflectance_Max = TOA_Reflectance_Max
        self.TOA_Reflectance_Step = TOA_Reflectance_Step
        self.Min_Difference_Thresholds_Calculation = Min_Difference_Thresholds_Calculation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Multi_Temporal_MethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Multi_Temporal_MethodType.subclass:
            return Multi_Temporal_MethodType.subclass(*args_, **kwargs_)
        else:
            return Multi_Temporal_MethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MT_AOT_Band_Code_D(self): return self.MT_AOT_Band_Code_D
    def set_MT_AOT_Band_Code_D(self, MT_AOT_Band_Code_D): self.MT_AOT_Band_Code_D = MT_AOT_Band_Code_D
    def get_MT_AOT_Band_Reflectance_Composite_Dm1(self): return self.MT_AOT_Band_Reflectance_Composite_Dm1
    def set_MT_AOT_Band_Reflectance_Composite_Dm1(self, MT_AOT_Band_Reflectance_Composite_Dm1): self.MT_AOT_Band_Reflectance_Composite_Dm1 = MT_AOT_Band_Reflectance_Composite_Dm1
    def get_MT_AOT_Band_LUT_Composite_Dm1(self): return self.MT_AOT_Band_LUT_Composite_Dm1
    def set_MT_AOT_Band_LUT_Composite_Dm1(self, MT_AOT_Band_LUT_Composite_Dm1): self.MT_AOT_Band_LUT_Composite_Dm1 = MT_AOT_Band_LUT_Composite_Dm1
    def get_Var_Band_Code_D(self): return self.Var_Band_Code_D
    def set_Var_Band_Code_D(self, Var_Band_Code_D): self.Var_Band_Code_D = Var_Band_Code_D
    def get_Var_Band_Code_Dm1(self): return self.Var_Band_Code_Dm1
    def set_Var_Band_Code_Dm1(self, Var_Band_Code_Dm1): self.Var_Band_Code_Dm1 = Var_Band_Code_Dm1
    def get_Relative_Var_Max(self): return self.Relative_Var_Max
    def set_Relative_Var_Max(self, Relative_Var_Max): self.Relative_Var_Max = Relative_Var_Max
    def get_W_MT_equation2(self): return self.W_MT_equation2
    def set_W_MT_equation2(self, W_MT_equation2): self.W_MT_equation2 = W_MT_equation2
    def get_Stdev_Band_Code(self): return self.Stdev_Band_Code
    def set_Stdev_Band_Code(self, Stdev_Band_Code): self.Stdev_Band_Code = Stdev_Band_Code
    def get_Stdev_Min(self): return self.Stdev_Min
    def set_Stdev_Min(self, Stdev_Min): self.Stdev_Min = Stdev_Min
    def get_Std_Noise(self): return self.Std_Noise
    def set_Std_Noise(self, Std_Noise): self.Std_Noise = Std_Noise
    def get_AOT_initial_Dm1(self): return self.AOT_initial_Dm1
    def set_AOT_initial_Dm1(self, AOT_initial_Dm1): self.AOT_initial_Dm1 = AOT_initial_Dm1
    def get_First_AOT(self): return self.First_AOT
    def set_First_AOT(self, First_AOT): self.First_AOT = First_AOT
    def get_Second_AOT(self): return self.Second_AOT
    def set_Second_AOT(self, Second_AOT): self.Second_AOT = Second_AOT
    def get_TOA_Reflectance_Min(self): return self.TOA_Reflectance_Min
    def set_TOA_Reflectance_Min(self, TOA_Reflectance_Min): self.TOA_Reflectance_Min = TOA_Reflectance_Min
    def get_TOA_Reflectance_Max(self): return self.TOA_Reflectance_Max
    def set_TOA_Reflectance_Max(self, TOA_Reflectance_Max): self.TOA_Reflectance_Max = TOA_Reflectance_Max
    def get_TOA_Reflectance_Step(self): return self.TOA_Reflectance_Step
    def set_TOA_Reflectance_Step(self, TOA_Reflectance_Step): self.TOA_Reflectance_Step = TOA_Reflectance_Step
    def get_Min_Difference_Thresholds_Calculation(self): return self.Min_Difference_Thresholds_Calculation
    def set_Min_Difference_Thresholds_Calculation(self, Min_Difference_Thresholds_Calculation): self.Min_Difference_Thresholds_Calculation = Min_Difference_Thresholds_Calculation
    def validate_MT_AOT_Band_Code_DType(self, value):
        # Validate type MT_AOT_Band_Code_DType, a restriction on xs:positiveInteger.
        pass
    def validate_MT_AOT_Band_Reflectance_Composite_Dm1Type(self, value):
        # Validate type MT_AOT_Band_Reflectance_Composite_Dm1Type, a restriction on xs:positiveInteger.
        pass
    def validate_MT_AOT_Band_LUT_Composite_Dm1Type(self, value):
        # Validate type MT_AOT_Band_LUT_Composite_Dm1Type, a restriction on xs:positiveInteger.
        pass
    def hasContent_(self):
        if (
            self.MT_AOT_Band_Code_D is not None or
            self.MT_AOT_Band_Reflectance_Composite_Dm1 is not None or
            self.MT_AOT_Band_LUT_Composite_Dm1 is not None or
            self.Var_Band_Code_D is not None or
            self.Var_Band_Code_Dm1 is not None or
            self.Relative_Var_Max is not None or
            self.W_MT_equation2 is not None or
            self.Stdev_Band_Code is not None or
            self.Stdev_Min is not None or
            self.Std_Noise is not None or
            self.AOT_initial_Dm1 is not None or
            self.First_AOT is not None or
            self.Second_AOT is not None or
            self.TOA_Reflectance_Min is not None or
            self.TOA_Reflectance_Max is not None or
            self.TOA_Reflectance_Step is not None or
            self.Min_Difference_Thresholds_Calculation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Multi_Temporal_MethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Multi_Temporal_MethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Multi_Temporal_MethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Multi_Temporal_MethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Multi_Temporal_MethodType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Multi_Temporal_MethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MT_AOT_Band_Code_D is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MT_AOT_Band_Code_D>%s</MT_AOT_Band_Code_D>%s' % (self.gds_format_integer_list(self.MT_AOT_Band_Code_D, input_name='MT_AOT_Band_Code_D'), eol_))
        if self.MT_AOT_Band_Reflectance_Composite_Dm1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MT_AOT_Band_Reflectance_Composite_Dm1>%s</MT_AOT_Band_Reflectance_Composite_Dm1>%s' % (self.gds_format_integer_list(self.MT_AOT_Band_Reflectance_Composite_Dm1, input_name='MT_AOT_Band_Reflectance_Composite_Dm1'), eol_))
        if self.MT_AOT_Band_LUT_Composite_Dm1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MT_AOT_Band_LUT_Composite_Dm1>%s</MT_AOT_Band_LUT_Composite_Dm1>%s' % (self.gds_format_integer_list(self.MT_AOT_Band_LUT_Composite_Dm1, input_name='MT_AOT_Band_LUT_Composite_Dm1'), eol_))
        if self.Var_Band_Code_D is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Var_Band_Code_D>%s</Var_Band_Code_D>%s' % (self.gds_format_integer(self.Var_Band_Code_D, input_name='Var_Band_Code_D'), eol_))
        if self.Var_Band_Code_Dm1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Var_Band_Code_Dm1>%s</Var_Band_Code_Dm1>%s' % (self.gds_format_integer(self.Var_Band_Code_Dm1, input_name='Var_Band_Code_Dm1'), eol_))
        if self.Relative_Var_Max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Relative_Var_Max>%s</Relative_Var_Max>%s' % (self.gds_format_double(self.Relative_Var_Max, input_name='Relative_Var_Max'), eol_))
        if self.W_MT_equation2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<W_MT_equation2>%s</W_MT_equation2>%s' % (self.gds_format_double(self.W_MT_equation2, input_name='W_MT_equation2'), eol_))
        if self.Stdev_Band_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Stdev_Band_Code>%s</Stdev_Band_Code>%s' % (self.gds_format_integer(self.Stdev_Band_Code, input_name='Stdev_Band_Code'), eol_))
        if self.Stdev_Min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Stdev_Min>%s</Stdev_Min>%s' % (self.gds_format_double(self.Stdev_Min, input_name='Stdev_Min'), eol_))
        if self.Std_Noise is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Std_Noise>%s</Std_Noise>%s' % (self.gds_format_double(self.Std_Noise, input_name='Std_Noise'), eol_))
        if self.AOT_initial_Dm1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AOT_initial_Dm1>%s</AOT_initial_Dm1>%s' % (self.gds_format_double(self.AOT_initial_Dm1, input_name='AOT_initial_Dm1'), eol_))
        if self.First_AOT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<First_AOT>%s</First_AOT>%s' % (self.gds_format_double(self.First_AOT, input_name='First_AOT'), eol_))
        if self.Second_AOT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Second_AOT>%s</Second_AOT>%s' % (self.gds_format_double(self.Second_AOT, input_name='Second_AOT'), eol_))
        if self.TOA_Reflectance_Min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TOA_Reflectance_Min>%s</TOA_Reflectance_Min>%s' % (self.gds_format_double(self.TOA_Reflectance_Min, input_name='TOA_Reflectance_Min'), eol_))
        if self.TOA_Reflectance_Max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TOA_Reflectance_Max>%s</TOA_Reflectance_Max>%s' % (self.gds_format_double(self.TOA_Reflectance_Max, input_name='TOA_Reflectance_Max'), eol_))
        if self.TOA_Reflectance_Step is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TOA_Reflectance_Step>%s</TOA_Reflectance_Step>%s' % (self.gds_format_double(self.TOA_Reflectance_Step, input_name='TOA_Reflectance_Step'), eol_))
        if self.Min_Difference_Thresholds_Calculation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Min_Difference_Thresholds_Calculation>%s</Min_Difference_Thresholds_Calculation>%s' % (self.gds_format_double(self.Min_Difference_Thresholds_Calculation, input_name='Min_Difference_Thresholds_Calculation'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MT_AOT_Band_Code_D':
            MT_AOT_Band_Code_D_ = child_.text
            MT_AOT_Band_Code_D_ = self.gds_validate_integer_list(MT_AOT_Band_Code_D_, node, 'MT_AOT_Band_Code_D')
            self.MT_AOT_Band_Code_D = MT_AOT_Band_Code_D_
            # validate type MT_AOT_Band_Code_DType
            self.validate_MT_AOT_Band_Code_DType(self.MT_AOT_Band_Code_D)
        elif nodeName_ == 'MT_AOT_Band_Reflectance_Composite_Dm1':
            MT_AOT_Band_Reflectance_Composite_Dm1_ = child_.text
            MT_AOT_Band_Reflectance_Composite_Dm1_ = self.gds_validate_integer_list(MT_AOT_Band_Reflectance_Composite_Dm1_, node, 'MT_AOT_Band_Reflectance_Composite_Dm1')
            self.MT_AOT_Band_Reflectance_Composite_Dm1 = MT_AOT_Band_Reflectance_Composite_Dm1_
            # validate type MT_AOT_Band_Reflectance_Composite_Dm1Type
            self.validate_MT_AOT_Band_Reflectance_Composite_Dm1Type(self.MT_AOT_Band_Reflectance_Composite_Dm1)
        elif nodeName_ == 'MT_AOT_Band_LUT_Composite_Dm1':
            MT_AOT_Band_LUT_Composite_Dm1_ = child_.text
            MT_AOT_Band_LUT_Composite_Dm1_ = self.gds_validate_integer_list(MT_AOT_Band_LUT_Composite_Dm1_, node, 'MT_AOT_Band_LUT_Composite_Dm1')
            self.MT_AOT_Band_LUT_Composite_Dm1 = MT_AOT_Band_LUT_Composite_Dm1_
            # validate type MT_AOT_Band_LUT_Composite_Dm1Type
            self.validate_MT_AOT_Band_LUT_Composite_Dm1Type(self.MT_AOT_Band_LUT_Composite_Dm1)
        elif nodeName_ == 'Var_Band_Code_D':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Var_Band_Code_D')
            self.Var_Band_Code_D = ival_
        elif nodeName_ == 'Var_Band_Code_Dm1':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Var_Band_Code_Dm1')
            self.Var_Band_Code_Dm1 = ival_
        elif nodeName_ == 'Relative_Var_Max':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Relative_Var_Max')
            self.Relative_Var_Max = fval_
        elif nodeName_ == 'W_MT_equation2':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'W_MT_equation2')
            self.W_MT_equation2 = fval_
        elif nodeName_ == 'Stdev_Band_Code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Stdev_Band_Code')
            self.Stdev_Band_Code = ival_
        elif nodeName_ == 'Stdev_Min':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Stdev_Min')
            self.Stdev_Min = fval_
        elif nodeName_ == 'Std_Noise':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Std_Noise')
            self.Std_Noise = fval_
        elif nodeName_ == 'AOT_initial_Dm1':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AOT_initial_Dm1')
            self.AOT_initial_Dm1 = fval_
        elif nodeName_ == 'First_AOT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'First_AOT')
            self.First_AOT = fval_
        elif nodeName_ == 'Second_AOT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Second_AOT')
            self.Second_AOT = fval_
        elif nodeName_ == 'TOA_Reflectance_Min':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOA_Reflectance_Min')
            self.TOA_Reflectance_Min = fval_
        elif nodeName_ == 'TOA_Reflectance_Max':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOA_Reflectance_Max')
            self.TOA_Reflectance_Max = fval_
        elif nodeName_ == 'TOA_Reflectance_Step':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOA_Reflectance_Step')
            self.TOA_Reflectance_Step = fval_
        elif nodeName_ == 'Min_Difference_Thresholds_Calculation':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Min_Difference_Thresholds_Calculation')
            self.Min_Difference_Thresholds_Calculation = fval_
# end class Multi_Temporal_MethodType


class Spectro_Temporal_MethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, A_Coefficient=None, B_Coefficient=None, MT_Weight_Threshold=None):
        self.original_tagname_ = None
        self.A_Coefficient = A_Coefficient
        self.B_Coefficient = B_Coefficient
        self.MT_Weight_Threshold = MT_Weight_Threshold
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Spectro_Temporal_MethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Spectro_Temporal_MethodType.subclass:
            return Spectro_Temporal_MethodType.subclass(*args_, **kwargs_)
        else:
            return Spectro_Temporal_MethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_A_Coefficient(self): return self.A_Coefficient
    def set_A_Coefficient(self, A_Coefficient): self.A_Coefficient = A_Coefficient
    def get_B_Coefficient(self): return self.B_Coefficient
    def set_B_Coefficient(self, B_Coefficient): self.B_Coefficient = B_Coefficient
    def get_MT_Weight_Threshold(self): return self.MT_Weight_Threshold
    def set_MT_Weight_Threshold(self, MT_Weight_Threshold): self.MT_Weight_Threshold = MT_Weight_Threshold
    def hasContent_(self):
        if (
            self.A_Coefficient is not None or
            self.B_Coefficient is not None or
            self.MT_Weight_Threshold is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Spectro_Temporal_MethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Spectro_Temporal_MethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Spectro_Temporal_MethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Spectro_Temporal_MethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Spectro_Temporal_MethodType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Spectro_Temporal_MethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.A_Coefficient is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<A_Coefficient>%s</A_Coefficient>%s' % (self.gds_format_integer(self.A_Coefficient, input_name='A_Coefficient'), eol_))
        if self.B_Coefficient is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<B_Coefficient>%s</B_Coefficient>%s' % (self.gds_format_integer(self.B_Coefficient, input_name='B_Coefficient'), eol_))
        if self.MT_Weight_Threshold is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MT_Weight_Threshold>%s</MT_Weight_Threshold>%s' % (self.gds_format_integer(self.MT_Weight_Threshold, input_name='MT_Weight_Threshold'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'A_Coefficient':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'A_Coefficient')
            self.A_Coefficient = ival_
        elif nodeName_ == 'B_Coefficient':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'B_Coefficient')
            self.B_Coefficient = ival_
        elif nodeName_ == 'MT_Weight_Threshold':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'MT_Weight_Threshold')
            self.MT_Weight_Threshold = ival_
# end class Spectro_Temporal_MethodType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AOT_Estimation'
        rootClass = AOT_Estimation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AOT_Estimation'
        rootClass = AOT_Estimation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AOT_Estimation'
        rootClass = AOT_Estimation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AOT_Estimation'
        rootClass = AOT_Estimation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from SimpleAOTReader import *\n\n')
        sys.stdout.write('import SimpleAOTReader as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AOT_Estimation",
    "Multi_Spectral_MethodType",
    "Multi_Temporal_MethodType",
    "Spectro_Temporal_MethodType"
]
