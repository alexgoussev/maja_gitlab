#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Dec 13 11:02:59 2017 by generateDS.py version 2.29.2.
# Python 2.7.14 (default, Dec  5 2017, 13:55:53)  [GCC 4.4.7 20120313 (Red Hat 4.4.7-18)]
#
# Command line options:
#   ('-o', 'maja_xml_camera_user_config.py')
#   ('-s', 'lib.py')
#   ('--member-specs', 'dict')
#
# Command line arguments:
#   /home/besquis/MAJA/centos-6.9/opt-gcc-debug/maja/core/0.0/share/schemas/SENTINEL2/MAJAUserConfig.xsd
#
# Command line:
#   /usr/local/bin/generateDS -o "maja_xml_camera_user_config.py" -s "lib.py" --member-specs="dict" /home/besquis/MAJA/centos-6.9/opt-gcc-debug/maja/core/0.0/share/schemas/SENTINEL2/MAJAUserConfig.xsd
#
# Current working directory (os.getcwd()):
#   MAJA-NG
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_

Validate_simpletypes_ = True
if sys.version_info[0] == 2:
    BaseStrType_ = str
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#


try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')

        class _FixedOffsetTZ(datetime_.tzinfo):

            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=''):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data

        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values

        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')

        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values

        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data

        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values

        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()

        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0',):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds,)
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path

        Tag_strip_pattern_ = re_.compile(r'\{.*\}')

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            return None

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in list(mapping.items())))

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, str):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

        def __eq__(self, other):
            if not isinstance(self, type(other)):
                return False
            return self.__dict__ == other.__dict__

        def __ne__(self, other):
            return not self.__eq__(other)

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

# # from IPython.Shell import IPShellEmbed
# # args = ''
# # ipshell = IPShellEmbed(args,
# #     banner = 'Dropping into IPython',
# #     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name,))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline,)
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:  # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))

    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:  # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:  # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):

    def __init__(self, name='', data_type='', container=0,
                 optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional

    def set_name(self, name): self.name = name

    def get_name(self): return self.name

    def set_data_type(self, data_type): self.data_type = data_type

    def get_data_type_chain(self): return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def set_container(self, container): self.container = container

    def get_container(self): return self.container

    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs

    def get_child_attrs(self): return self.child_attrs

    def set_choice(self, choice): self.choice = choice

    def get_choice(self): return self.choice

    def set_optional(self, optional): self.optional = optional

    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ConfigType(GeneratedsSuper):
    member_data_items_ = {
        'Business': MemberSpec_(
            'Business', 'BusinessType', 0, 0, {
                'type': 'BusinessType', 'name': 'Business'}, None), 'Algorithms': MemberSpec_(
            'Algorithms', 'AlgorithmsType', 0, 0, {
                'type': 'AlgorithmsType', 'name': 'Algorithms'}, None), }
    subclass = None
    superclass = None

    def __init__(self, Business=None, Algorithms=None):
        self.original_tagname_ = None
        self.Business = Business
        self.Algorithms = Algorithms

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConfigType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConfigType.subclass:
            return ConfigType.subclass(*args_, **kwargs_)
        else:
            return ConfigType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Business(self): return self.Business

    def set_Business(self, Business): self.Business = Business

    def get_Algorithms(self): return self.Algorithms

    def set_Algorithms(self, Algorithms): self.Algorithms = Algorithms

    def hasContent_(self):
        if (
            self.Business is not None or
            self.Algorithms is not None
        ):
            return True
        else:
            return False

    def export(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='ConfigType',
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConfigType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConfigType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='maja:', name_='ConfigType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='maja:', name_='ConfigType'):
        pass

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='ConfigType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Business is not None:
            self.Business.export(outfile, level, namespace_, name_='Business', pretty_print=pretty_print)
        if self.Algorithms is not None:
            self.Algorithms.export(outfile, level, namespace_, name_='Algorithms', pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Business':
            obj_ = BusinessType.factory()
            obj_.build(child_)
            self.Business = obj_
            obj_.original_tagname_ = 'Business'
        elif nodeName_ == 'Algorithms':
            obj_ = AlgorithmsType.factory()
            obj_.build(child_)
            self.Algorithms = obj_
            obj_.original_tagname_ = 'Algorithms'
# end class ConfigType


class ImageDivision_Type(GeneratedsSuper):
    member_data_items_ = {
        'method': MemberSpec_('method', 'xs:string', 0, 0, {'use': 'required'}),
        'NbStrips': MemberSpec_('NbStrips', 'NbStripsType', 0, 0, {'type': 'NbStripsType', 'name': 'NbStrips'}, None),
    }
    subclass = None
    superclass = None

    def __init__(self, method=None, NbStrips=None):
        self.original_tagname_ = None
        self.method = _cast(None, method)
        self.NbStrips = NbStrips

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageDivision_Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageDivision_Type.subclass:
            return ImageDivision_Type.subclass(*args_, **kwargs_)
        else:
            return ImageDivision_Type(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_NbStrips(self): return self.NbStrips

    def set_NbStrips(self, NbStrips): self.NbStrips = NbStrips

    def get_method(self): return self.method

    def set_method(self, method): self.method = method

    def hasContent_(self):
        if (
            self.NbStrips is not None
        ):
            return True
        else:
            return False

    def export(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='ImageDivision_Type',
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageDivision_Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImageDivision_Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='maja:',
                name_='ImageDivision_Type',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='maja:', name_='ImageDivision_Type'):
        if self.method is not None and 'method' not in already_processed:
            already_processed.add('method')
            outfile.write(
                ' method=%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_attrib(
                            self.method),
                        input_name='method')),
                 ))

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='ImageDivision_Type',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NbStrips is not None:
            self.NbStrips.export(outfile, level, namespace_, name_='NbStrips', pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('method', node)
        if value is not None and 'method' not in already_processed:
            already_processed.add('method')
            self.method = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NbStrips':
            obj_ = NbStripsType.factory()
            obj_.build(child_)
            self.NbStrips = obj_
            obj_.original_tagname_ = 'NbStrips'
# end class ImageDivision_Type


class BusinessType(GeneratedsSuper):
    member_data_items_ = {
        'ImageDivision': MemberSpec_(
            'ImageDivision', 'ImageDivision_Type', 0, 0, {
                'type': 'ImageDivision_Type', 'name': 'ImageDivision'}, None), 'L2CoarseResolution': MemberSpec_(
            'L2CoarseResolution', [
                'NonNegativeInteger_Type', 'xs:nonNegativeInteger'], 0, 0, {
                'type': 'xs:nonNegativeInteger', 'name': 'L2CoarseResolution'}, None), }
    subclass = None
    superclass = None

    def __init__(self, ImageDivision=None, L2CoarseResolution=None):
        self.original_tagname_ = None
        self.ImageDivision = ImageDivision
        self.L2CoarseResolution = L2CoarseResolution
        self.validate_NonNegativeInteger_Type(self.L2CoarseResolution)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BusinessType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BusinessType.subclass:
            return BusinessType.subclass(*args_, **kwargs_)
        else:
            return BusinessType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ImageDivision(self): return self.ImageDivision

    def set_ImageDivision(self, ImageDivision): self.ImageDivision = ImageDivision

    def get_L2CoarseResolution(self): return self.L2CoarseResolution

    def set_L2CoarseResolution(self, L2CoarseResolution): self.L2CoarseResolution = L2CoarseResolution

    def validate_NonNegativeInteger_Type(self, value):
        # Validate type NonNegativeInteger_Type, a restriction on xs:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            pass

    def hasContent_(self):
        if (
            self.ImageDivision is not None or
            self.L2CoarseResolution is not None
        ):
            return True
        else:
            return False

    def export(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='BusinessType',
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BusinessType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BusinessType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='maja:', name_='BusinessType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='maja:', name_='BusinessType'):
        pass

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='BusinessType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ImageDivision is not None:
            self.ImageDivision.export(outfile, level, namespace_, name_='ImageDivision', pretty_print=pretty_print)
        if self.L2CoarseResolution is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:L2CoarseResolution>%s</maja:L2CoarseResolution>%s' %
                          (self.gds_format_integer(self.L2CoarseResolution, input_name='L2CoarseResolution'), eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ImageDivision':
            obj_ = ImageDivision_Type.factory()
            obj_.build(child_)
            self.ImageDivision = obj_
            obj_.original_tagname_ = 'ImageDivision'
        elif nodeName_ == 'L2CoarseResolution':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'L2CoarseResolution')
            self.L2CoarseResolution = ival_
            # validate type NonNegativeInteger_Type
            self.validate_NonNegativeInteger_Type(self.L2CoarseResolution)
# end class BusinessType


class AlgorithmsType(GeneratedsSuper):
    member_data_items_ = {
        'GRID_Reference_Altitudes': MemberSpec_(
            'GRID_Reference_Altitudes', 'GRID_Reference_AltitudesType', 0, 0, {
                'type': 'GRID_Reference_AltitudesType', 'name': 'GRID_Reference_Altitudes'}, None), 'Atmospheric_Absorption_Correction': MemberSpec_(
            'Atmospheric_Absorption_Correction', 'Atmospheric_Absorption_CorrectionType', 0, 0, {
                'type': 'Atmospheric_Absorption_CorrectionType', 'name': 'Atmospheric_Absorption_Correction'}, None), }
    subclass = None
    superclass = None

    def __init__(self, GRID_Reference_Altitudes=None, Atmospheric_Absorption_Correction=None):
        self.original_tagname_ = None
        self.GRID_Reference_Altitudes = GRID_Reference_Altitudes
        self.Atmospheric_Absorption_Correction = Atmospheric_Absorption_Correction

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlgorithmsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlgorithmsType.subclass:
            return AlgorithmsType.subclass(*args_, **kwargs_)
        else:
            return AlgorithmsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_GRID_Reference_Altitudes(self): return self.GRID_Reference_Altitudes

    def set_GRID_Reference_Altitudes(
        self, GRID_Reference_Altitudes): self.GRID_Reference_Altitudes = GRID_Reference_Altitudes

    def get_Atmospheric_Absorption_Correction(self): return self.Atmospheric_Absorption_Correction

    def set_Atmospheric_Absorption_Correction(
        self, Atmospheric_Absorption_Correction): self.Atmospheric_Absorption_Correction = Atmospheric_Absorption_Correction

    def hasContent_(self):
        if (
            self.GRID_Reference_Altitudes is not None or
            self.Atmospheric_Absorption_Correction is not None
        ):
            return True
        else:
            return False

    def export(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='AlgorithmsType',
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlgorithmsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AlgorithmsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='maja:',
                name_='AlgorithmsType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='maja:', name_='AlgorithmsType'):
        pass

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='AlgorithmsType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GRID_Reference_Altitudes is not None:
            self.GRID_Reference_Altitudes.export(
                outfile,
                level,
                namespace_,
                name_='GRID_Reference_Altitudes',
                pretty_print=pretty_print)
        if self.Atmospheric_Absorption_Correction is not None:
            self.Atmospheric_Absorption_Correction.export(
                outfile,
                level,
                namespace_,
                name_='Atmospheric_Absorption_Correction',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GRID_Reference_Altitudes':
            obj_ = GRID_Reference_AltitudesType.factory()
            obj_.build(child_)
            self.GRID_Reference_Altitudes = obj_
            obj_.original_tagname_ = 'GRID_Reference_Altitudes'
        elif nodeName_ == 'Atmospheric_Absorption_Correction':
            obj_ = Atmospheric_Absorption_CorrectionType.factory()
            obj_.build(child_)
            self.Atmospheric_Absorption_Correction = obj_
            obj_.original_tagname_ = 'Atmospheric_Absorption_Correction'
# end class AlgorithmsType


class GRID_Reference_AltitudesType(GeneratedsSuper):
    member_data_items_ = {
        'SOLH1': MemberSpec_(
            'SOLH1', [
                'NonNegativeInteger_Type', 'xs:nonNegativeInteger'], 0, 0, {
                'type': 'xs:nonNegativeInteger', 'name': 'SOLH1'}, None), 'SOLH2': MemberSpec_(
                    'SOLH2', [
                        'NonNegativeInteger_Type', 'xs:nonNegativeInteger'], 0, 0, {
                            'type': 'xs:nonNegativeInteger', 'name': 'SOLH2'}, None), 'SOLHRef': MemberSpec_(
                                'SOLHRef', [
                                    'NonNegativeInteger_Type', 'xs:nonNegativeInteger'], 0, 0, {
                                        'type': 'xs:nonNegativeInteger', 'name': 'SOLHRef'}, None), 'VIEHRef': MemberSpec_(
                                            'VIEHRef', [
                                                'NonNegativeInteger_Type', 'xs:nonNegativeInteger'], 0, 0, {
                                                    'type': 'xs:nonNegativeInteger', 'name': 'VIEHRef'}, None), }
    subclass = None
    superclass = None

    def __init__(self, SOLH1=None, SOLH2=None, SOLHRef=None, VIEHRef=None):
        self.original_tagname_ = None
        self.SOLH1 = SOLH1
        self.validate_NonNegativeInteger_Type(self.SOLH1)
        self.SOLH2 = SOLH2
        self.validate_NonNegativeInteger_Type(self.SOLH2)
        self.SOLHRef = SOLHRef
        self.validate_NonNegativeInteger_Type(self.SOLHRef)
        self.VIEHRef = VIEHRef
        self.validate_NonNegativeInteger_Type(self.VIEHRef)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GRID_Reference_AltitudesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GRID_Reference_AltitudesType.subclass:
            return GRID_Reference_AltitudesType.subclass(*args_, **kwargs_)
        else:
            return GRID_Reference_AltitudesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_SOLH1(self): return self.SOLH1

    def set_SOLH1(self, SOLH1): self.SOLH1 = SOLH1

    def get_SOLH2(self): return self.SOLH2

    def set_SOLH2(self, SOLH2): self.SOLH2 = SOLH2

    def get_SOLHRef(self): return self.SOLHRef

    def set_SOLHRef(self, SOLHRef): self.SOLHRef = SOLHRef

    def get_VIEHRef(self): return self.VIEHRef

    def set_VIEHRef(self, VIEHRef): self.VIEHRef = VIEHRef

    def validate_NonNegativeInteger_Type(self, value):
        # Validate type NonNegativeInteger_Type, a restriction on xs:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            pass

    def hasContent_(self):
        if (
            self.SOLH1 is not None or
            self.SOLH2 is not None or
            self.SOLHRef is not None or
            self.VIEHRef is not None
        ):
            return True
        else:
            return False

    def export(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='GRID_Reference_AltitudesType',
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GRID_Reference_AltitudesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GRID_Reference_AltitudesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='maja:',
                name_='GRID_Reference_AltitudesType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(
            self,
            outfile,
            level,
            already_processed,
            namespace_='maja:',
            name_='GRID_Reference_AltitudesType'):
        pass

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='GRID_Reference_AltitudesType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SOLH1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:SOLH1>%s</maja:SOLH1>%s' %
                          (self.gds_format_integer(self.SOLH1, input_name='SOLH1'), eol_))
        if self.SOLH2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:SOLH2>%s</maja:SOLH2>%s' %
                          (self.gds_format_integer(self.SOLH2, input_name='SOLH2'), eol_))
        if self.SOLHRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:SOLHRef>%s</maja:SOLHRef>%s' %
                          (self.gds_format_integer(self.SOLHRef, input_name='SOLHRef'), eol_))
        if self.VIEHRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:VIEHRef>%s</maja:VIEHRef>%s' %
                          (self.gds_format_integer(self.VIEHRef, input_name='VIEHRef'), eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SOLH1':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SOLH1')
            self.SOLH1 = ival_
            # validate type NonNegativeInteger_Type
            self.validate_NonNegativeInteger_Type(self.SOLH1)
        elif nodeName_ == 'SOLH2':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SOLH2')
            self.SOLH2 = ival_
            # validate type NonNegativeInteger_Type
            self.validate_NonNegativeInteger_Type(self.SOLH2)
        elif nodeName_ == 'SOLHRef':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SOLHRef')
            self.SOLHRef = ival_
            # validate type NonNegativeInteger_Type
            self.validate_NonNegativeInteger_Type(self.SOLHRef)
        elif nodeName_ == 'VIEHRef':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'VIEHRef')
            self.VIEHRef = ival_
            # validate type NonNegativeInteger_Type
            self.validate_NonNegativeInteger_Type(self.VIEHRef)
# end class GRID_Reference_AltitudesType


class Atmospheric_Absorption_CorrectionType(GeneratedsSuper):
    member_data_items_ = {
        'Use_Default_Constant_Ozone_Amount': MemberSpec_(
            'Use_Default_Constant_Ozone_Amount', [
                'Bool_Type', 'xs:boolean'], 0, 0, {
                'type': 'xs:boolean', 'name': 'Use_Default_Constant_Ozone_Amount'}, None), }
    subclass = None
    superclass = None

    def __init__(self, Use_Default_Constant_Ozone_Amount=None):
        self.original_tagname_ = None
        self.Use_Default_Constant_Ozone_Amount = Use_Default_Constant_Ozone_Amount
        self.validate_Bool_Type(self.Use_Default_Constant_Ozone_Amount)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Atmospheric_Absorption_CorrectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Atmospheric_Absorption_CorrectionType.subclass:
            return Atmospheric_Absorption_CorrectionType.subclass(*args_, **kwargs_)
        else:
            return Atmospheric_Absorption_CorrectionType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Use_Default_Constant_Ozone_Amount(self): return self.Use_Default_Constant_Ozone_Amount

    def set_Use_Default_Constant_Ozone_Amount(
        self, Use_Default_Constant_Ozone_Amount): self.Use_Default_Constant_Ozone_Amount = Use_Default_Constant_Ozone_Amount

    def validate_Bool_Type(self, value):
        # Validate type Bool_Type, a restriction on xs:boolean.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Bool_Type_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' %
                               (value.encode('utf-8'), self.validate_Bool_Type_patterns_,))

    validate_Bool_Type_patterns_ = [['^true$|^false$']]

    def hasContent_(self):
        if (
            self.Use_Default_Constant_Ozone_Amount is not None
        ):
            return True
        else:
            return False

    def export(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='Atmospheric_Absorption_CorrectionType',
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Atmospheric_Absorption_CorrectionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_,
                              name_='Atmospheric_Absorption_CorrectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='maja:',
                name_='Atmospheric_Absorption_CorrectionType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(
            self,
            outfile,
            level,
            already_processed,
            namespace_='maja:',
            name_='Atmospheric_Absorption_CorrectionType'):
        pass

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='Atmospheric_Absorption_CorrectionType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Use_Default_Constant_Ozone_Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<maja:Use_Default_Constant_Ozone_Amount>%s</maja:Use_Default_Constant_Ozone_Amount>%s' %
                (self.gds_format_boolean(
                    self.Use_Default_Constant_Ozone_Amount,
                    input_name='Use_Default_Constant_Ozone_Amount'),
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Use_Default_Constant_Ozone_Amount':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Use_Default_Constant_Ozone_Amount')
            self.Use_Default_Constant_Ozone_Amount = ival_
            # validate type Bool_Type
            # self.validate_Bool_Type(self.Use_Default_Constant_Ozone_Amount)
# end class Atmospheric_Absorption_CorrectionType


class NbStripsType(GeneratedsSuper):
    member_data_items_ = {
        'L2InitProcessing': MemberSpec_(
            'L2InitProcessing', 'xs:positiveInteger', 0, 0, {
                'type': 'xs:positiveInteger', 'name': 'L2InitProcessing'}, None), 'L2NominalProcessing': MemberSpec_(
            'L2NominalProcessing', 'xs:positiveInteger', 0, 0, {
                'type': 'xs:positiveInteger', 'name': 'L2NominalProcessing'}, None), 'L2BackwardProcessing': MemberSpec_(
            'L2BackwardProcessing', 'xs:positiveInteger', 0, 0, {
                'type': 'xs:positiveInteger', 'name': 'L2BackwardProcessing'}, None), 'L3Processing': MemberSpec_(
            'L3Processing', 'xs:positiveInteger', 0, 0, {
                'type': 'xs:positiveInteger', 'name': 'L3Processing'}, None), 'ChecktoolProcessing': MemberSpec_(
            'ChecktoolProcessing', 'xs:positiveInteger', 0, 0, {
                'type': 'xs:positiveInteger', 'name': 'ChecktoolProcessing'}, None), }
    subclass = None
    superclass = None

    def __init__(
            self,
            L2InitProcessing=None,
            L2NominalProcessing=None,
            L2BackwardProcessing=None,
            L3Processing=None,
            ChecktoolProcessing=None):
        self.original_tagname_ = None
        self.L2InitProcessing = L2InitProcessing
        self.L2NominalProcessing = L2NominalProcessing
        self.L2BackwardProcessing = L2BackwardProcessing
        self.L3Processing = L3Processing
        self.ChecktoolProcessing = ChecktoolProcessing

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NbStripsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NbStripsType.subclass:
            return NbStripsType.subclass(*args_, **kwargs_)
        else:
            return NbStripsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_L2InitProcessing(self): return self.L2InitProcessing

    def set_L2InitProcessing(self, L2InitProcessing): self.L2InitProcessing = L2InitProcessing

    def get_L2NominalProcessing(self): return self.L2NominalProcessing

    def set_L2NominalProcessing(self, L2NominalProcessing): self.L2NominalProcessing = L2NominalProcessing

    def get_L2BackwardProcessing(self): return self.L2BackwardProcessing

    def set_L2BackwardProcessing(self, L2BackwardProcessing): self.L2BackwardProcessing = L2BackwardProcessing

    def get_L3Processing(self): return self.L3Processing

    def set_L3Processing(self, L3Processing): self.L3Processing = L3Processing

    def get_ChecktoolProcessing(self): return self.ChecktoolProcessing

    def set_ChecktoolProcessing(self, ChecktoolProcessing): self.ChecktoolProcessing = ChecktoolProcessing

    def hasContent_(self):
        if (
            self.L2InitProcessing is not None or
            self.L2NominalProcessing is not None or
            self.L2BackwardProcessing is not None or
            self.L3Processing is not None or
            self.ChecktoolProcessing is not None
        ):
            return True
        else:
            return False

    def export(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='NbStripsType',
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NbStripsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NbStripsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='maja:', name_='NbStripsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='maja:', name_='NbStripsType'):
        pass

    def exportChildren(
            self,
            outfile,
            level,
            namespace_='maja:',
            name_='NbStripsType',
            fromsubclass_=False,
            pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.L2InitProcessing is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:L2InitProcessing>%s</maja:L2InitProcessing>%s' %
                          (self.gds_format_integer(self.L2InitProcessing, input_name='L2InitProcessing'), eol_))
        if self.L2NominalProcessing is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:L2NominalProcessing>%s</maja:L2NominalProcessing>%s' %
                          (self.gds_format_integer(self.L2NominalProcessing, input_name='L2NominalProcessing'), eol_))
        if self.L2BackwardProcessing is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:L2BackwardProcessing>%s</maja:L2BackwardProcessing>%s' %
                          (self.gds_format_integer(self.L2BackwardProcessing, input_name='L2BackwardProcessing'), eol_))
        if self.L3Processing is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:L3Processing>%s</maja:L3Processing>%s' %
                          (self.gds_format_integer(self.L3Processing, input_name='L3Processing'), eol_))
        if self.ChecktoolProcessing is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<maja:ChecktoolProcessing>%s</maja:ChecktoolProcessing>%s' %
                          (self.gds_format_integer(self.ChecktoolProcessing, input_name='ChecktoolProcessing'), eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'L2InitProcessing':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'L2InitProcessing')
            self.L2InitProcessing = ival_
        elif nodeName_ == 'L2NominalProcessing':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'L2NominalProcessing')
            self.L2NominalProcessing = ival_
        elif nodeName_ == 'L2BackwardProcessing':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'L2BackwardProcessing')
            self.L2BackwardProcessing = ival_
        elif nodeName_ == 'L3Processing':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'L3Processing')
            self.L3Processing = ival_
        elif nodeName_ == 'ChecktoolProcessing':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ChecktoolProcessing')
            self.ChecktoolProcessing = ival_
# end class NbStripsType


GDSClassesMapping = {
    'Config': ConfigType,
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    LOGGER.debug(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ConfigType'
        rootClass = ConfigType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:maja="http://maja.fr"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ConfigType'
        rootClass = ConfigType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from io import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ConfigType'
        rootClass = ConfigType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:maja="http://maja.fr"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ConfigType'
        rootClass = ConfigType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from maja_xml_camera_user_config import *\n\n')
        sys.stdout.write('import maja_xml_camera_user_config as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    # import pdb; pdb.set_trace()
    main()

__all__ = [
    "AlgorithmsType",
    "Atmospheric_Absorption_CorrectionType",
    "BusinessType",
    "ConfigType",
    "GRID_Reference_AltitudesType",
    "ImageDivision_Type",
    "NbStripsType"
]
